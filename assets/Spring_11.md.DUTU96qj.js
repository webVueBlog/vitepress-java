import{_ as n,c as a,o as s,a8 as e}from"./chunks/framework.CbRyzB36.js";const h=JSON.parse('{"title":"@Transactional(readOnly=true) 真的是提高性能的灵丹妙药吗？","description":"","frontmatter":{},"headers":[],"relativePath":"Spring/11.md","filePath":"Spring/11.md"}'),t={name:"Spring/11.md"},p=e(`<h1 id="transactional-readonly-true-真的是提高性能的灵丹妙药吗" tabindex="-1">@Transactional(readOnly=true) 真的是提高性能的灵丹妙药吗？ <a class="header-anchor" href="#transactional-readonly-true-真的是提高性能的灵丹妙药吗" aria-label="Permalink to &quot;@Transactional(readOnly=true) 真的是提高性能的灵丹妙药吗？&quot;">​</a></h1><h2 id="_1-transactional-readonly-true-是如何工作的-spring对它做了什么" tabindex="-1">1 @Transactional(readOnly = true)是如何工作的 ？Spring对它做了什么 <a class="header-anchor" href="#_1-transactional-readonly-true-是如何工作的-spring对它做了什么" aria-label="Permalink to &quot;1 @Transactional(readOnly = true)是如何工作的 ？Spring对它做了什么&quot;">​</a></h2><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>	 * Prepare the transactional {@code Connection} right after transaction begin.</span></span>
<span class="line"><span>	 * &lt;p&gt;The default implementation executes a &quot;SET TRANSACTION READ ONLY&quot; statement</span></span>
<span class="line"><span>	 * if the {@link #setEnforceReadOnly &quot;enforceReadOnly&quot;} flag is set to {@code true}</span></span>
<span class="line"><span>	 * and the transaction definition indicates a read-only transaction.</span></span>
<span class="line"><span>	 * &lt;p&gt;The &quot;SET TRANSACTION READ ONLY&quot; is understood by Oracle, MySQL and Postgres</span></span>
<span class="line"><span>	 * and may work with other databases as well. If you&#39;d like to adapt this treatment,</span></span>
<span class="line"><span>	 * override this method accordingly.</span></span>
<span class="line"><span>	 * @param con the transactional JDBC Connection</span></span>
<span class="line"><span>	 * @param definition the current transaction definition</span></span>
<span class="line"><span>	 * @throws SQLException if thrown by JDBC API</span></span>
<span class="line"><span>	 * @since 4.3.7</span></span>
<span class="line"><span>	 * @see #setEnforceReadOnly</span></span>
<span class="line"><span>	 */</span></span>
<span class="line"><span>	protected void prepareTransactionalConnection(Connection con, TransactionDefinition definition)</span></span>
<span class="line"><span>			throws SQLException {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		if (isEnforceReadOnly() &amp;&amp; definition.isReadOnly()) {</span></span>
<span class="line"><span>			try (Statement stmt = con.createStatement()) {</span></span>
<span class="line"><span>				stmt.executeUpdate(&quot;SET TRANSACTION READ ONLY&quot;);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>实际上就是利用数据库的SET TRANSACTION READ ONLY， 开启只读事务，那只读事务对数据库意味着什么呢？</p><p>1 通过执行 SET TRANSACTION READ ONLY，将当前事务设置为只读事务。这意味着在此事务内部，任何修改数据的操作 （如 INSERT、UPDATE、DELETE）都将被禁止，只能执行读取操作（如 SELECT）。</p><p>2 只读事务依然会运用上隔离级别（MVCC），需要事务隔离级别需要一定性能开销。</p><h2 id="_2-所以很多人一直纠结查询到底要不要设置只读-不设置是不是一样的" tabindex="-1">2 所以很多人一直纠结查询到底要不要设置只读，不设置是不是一样的？ <a class="header-anchor" href="#_2-所以很多人一直纠结查询到底要不要设置只读-不设置是不是一样的" aria-label="Permalink to &quot;2 所以很多人一直纠结查询到底要不要设置只读，不设置是不是一样的？&quot;">​</a></h2><p>一般情况下，执行查询时不开启事务的性能可能会稍微优于开启只读事务。这是因为不开启事务的查询操作不会涉及事务管理和隔离级别的开销，因此可能更为轻量级和高效。</p><p>当执行查询操作时，如果不需要事务的隔离级别和一致性保证，并且不需要使用事务管理的功能，那么不开启事务可能是更为合适的选择。 这种情况下，查询操作将立即执行并返回结果，不会受到事务管理和隔离级别的开销影响。</p><p>然而，需要注意的是，如果应用需要保证数据的一致性和隔离性，并且希望查询操作与其他事务的修改行为相互独立，那么开启只读事务是必要的。 在这种情况下，虽然可能会有一些额外的性能开销，但可以保证数据的一致性和隔离性，避免了并发操作可能引起的数据不一致问题。</p><p>综上所述，选择是否开启只读事务还是不开启事务，取决于具体的应用场景和需求。 如果应用需要保证数据的一致性和隔离性，那么开启只读事务是必要的； 如果不需要这些保证，并且追求查询操作的性能优化，那么不开启事务可能更为合适。</p>`,11),l=[p];function r(i,c,o,d,u,b){return s(),a("div",null,l)}const T=n(t,[["render",r]]);export{h as __pageData,T as default};
