import{_ as a,c as e,o as t,a8 as r}from"./chunks/framework.DDO5B0CJ.js";const i="/vitepress-java/assets/img_5.mBfxzUUf.png",n="/vitepress-java/assets/img_6.9tIlFHrN.png",f=JSON.parse('{"title":"五、对象操作","description":"","frontmatter":{},"headers":[],"relativePath":"javaIo/objectOperation.md","filePath":"javaIo/objectOperation.md"}'),o={name:"javaIo/objectOperation.md"},s=r('<h1 id="五、对象操作" tabindex="-1">五、对象操作 <a class="header-anchor" href="#五、对象操作" aria-label="Permalink to &quot;五、对象操作&quot;">​</a></h1><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><p>序列化就是将一个对象转换成字节序列，方便存储和传输</p><p>序列化：ObjectOutputStream.writeObject()</p><p>反序列化：ObjectInputStream.readObject()</p><p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状 态</p><h2 id="serializable" tabindex="-1">Serializable <a class="header-anchor" href="#serializable" aria-label="Permalink to &quot;Serializable&quot;">​</a></h2><p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现， 但是如果不去实现它的话而进行序列化，会抛出异常。</p><p><img src="'+i+'" alt="img_5.png" loading="lazy"></p><p><img src="'+n+'" alt="img_6.png" loading="lazy"></p><h2 id="transient" tabindex="-1">transient <a class="header-anchor" href="#transient" aria-label="Permalink to &quot;transient&quot;">​</a></h2><p>transient 关键字可以使一些属性不会被序列化。</p><p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态 扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重 写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p><p>private transient Object[] elementData;</p>',14),p=[s];function l(c,_,d,h,m,b){return t(),e("div",null,p)}const j=a(o,[["render",l]]);export{f as __pageData,j as default};
