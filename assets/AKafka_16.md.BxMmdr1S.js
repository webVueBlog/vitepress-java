import{_ as a,c as t,o as i,a8 as s}from"./chunks/framework.DDO5B0CJ.js";const e="/vitepress-java/assets/img_78.DmG8DbwW.png",p="/vitepress-java/assets/img_79.Ciu1nETb.png",o="/vitepress-java/assets/img_80.zoI00But.png",l="/vitepress-java/assets/img_81.CvgiqWlo.png",n="/vitepress-java/assets/img_82.809Spqf9.png",g="/vitepress-java/assets/img_83.D5e5t1n5.png",_="/vitepress-java/assets/img_84.CWKQTI2p.png",S=JSON.parse('{"title":"4.5-Kafka数据存储流程和log日志讲解","description":"","frontmatter":{},"headers":[],"relativePath":"AKafka/16.md","filePath":"AKafka/16.md"}'),r={name:"AKafka/16.md"},m=s('<h1 id="_4-5-kafka数据存储流程和log日志讲解" tabindex="-1">4.5-Kafka数据存储流程和log日志讲解 <a class="header-anchor" href="#_4-5-kafka数据存储流程和log日志讲解" aria-label="Permalink to &quot;4.5-Kafka数据存储流程和log日志讲解&quot;">​</a></h1><p><img src="'+e+'" alt="img_78.png" loading="lazy"></p><p>日志</p><p><img src="'+p+'" alt="img_79.png" loading="lazy"></p><p>leo</p><p><img src="'+o+'" alt="img_80.png" loading="lazy"></p><p>HW</p><p><img src="'+l+'" alt="img_81.png" loading="lazy"></p><p>offset:</p><p><img src="'+n+'" alt="img_82.png" loading="lazy"></p><p>offset:</p><ul><li>每个partition都由一系列有序的，不可变的消息组成，这些消息被连续的追加到partition中</li><li>partition中的每个消息都有一个连续的序列号叫做offset，用于partition唯一标识一条消息</li><li>可以认为offset是partition中Message的id</li></ul><p><img src="'+g+'" alt="img_83.png" loading="lazy"></p><p>Segment:每个partition又由多个segment file组成：</p><ul><li>segment file 由2部分组成，分别为index file和data file（log file)，</li><li>两个文件是一一对应的，后缀&quot;.index&quot; 和 &quot;.log&quot; 分别标识索引文件和数据文件</li><li>命名规则：partition的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset+1</li></ul><p><img src="'+_+'" alt="img_84.png" loading="lazy"></p><p>kafka高效文件存储设计特点：</p><ul><li>kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用。</li><li>通过索引信息可以快速定位message和确定要消费的消息位置。</li><li>producer生产数据，要写入到log文件中，写的过程中一直追加到文件末尾，为顺序写，官网数据表明。同样的磁盘，顺序写能到600M/S，而随机写只有100k/s</li></ul>',18),c=[m];function f(d,u,k,v,h,q){return i(),t("div",null,c)}const T=a(r,[["render",f]]);export{S as __pageData,T as default};
