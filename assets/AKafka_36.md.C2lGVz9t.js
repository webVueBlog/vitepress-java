import{_ as a,c as e,o as r,a8 as t}from"./chunks/framework.DDO5B0CJ.js";const i="/vitepress-java/assets/img_137.6W25uhjg.png",l="/vitepress-java/assets/img_138.DUZkkMUc.png",s="/vitepress-java/assets/img_139.DM_-OcS8.png",h=JSON.parse('{"title":"8.4-Kafka数据可靠性保证原理之副本Replica+ACK介绍《下》","description":"","frontmatter":{},"headers":[],"relativePath":"AKafka/36.md","filePath":"AKafka/36.md"}'),c={name:"AKafka/36.md"},o=t('<h1 id="_8-4-kafka数据可靠性保证原理之副本replica-ack介绍《下》" tabindex="-1">8.4-Kafka数据可靠性保证原理之副本Replica+ACK介绍《下》 <a class="header-anchor" href="#_8-4-kafka数据可靠性保证原理之副本replica-ack介绍《下》" aria-label="Permalink to &quot;8.4-Kafka数据可靠性保证原理之副本Replica+ACK介绍《下》&quot;">​</a></h1><p><img src="'+i+'" alt="img_137.png" loading="lazy"></p><p>问题点：Partition什么时间发送ack确认机制（要追求高吞吐量，那么就要放弃可靠性）</p><ul><li>当Producer向leader发送数据时，可以通过request.required.acks参数来设置数据可靠性的级别</li><li>副本数据同步策略，ack有3个可选值，分别是0，1，all。</li><li>acks=0：表示producer不需要等待任何来自broker的确认，副本数据丢失，吞吐量最高。</li><li>acks=1：表示producer只需要等待leader的确认，不需要等待所有follower的确认，leader数据丢失，吞吐量较高。</li><li>acks=all：表示producer需要等待所有follower的确认，数据可靠性最高，但吞吐量最低。</li></ul><p><img src="'+l+'" alt="img_138.png" loading="lazy"></p><p>ack = all (即为-1)</p><p><img src="'+s+'" alt="img_139.png" loading="lazy"></p><p>消费端做好处理</p>',8),p=[o];function _(n,d,k,m,g,f){return r(),e("div",null,p)}const A=a(c,[["render",_]]);export{h as __pageData,A as default};
