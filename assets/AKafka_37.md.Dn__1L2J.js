import{_ as a,c as e,o as l,a8 as i}from"./chunks/framework.DDO5B0CJ.js";const r="/vitepress-java/assets/img_140.0AkmR-ts.png",I=JSON.parse('{"title":"8.5- Kafka的in-sync replica set机制讲解","description":"","frontmatter":{},"headers":[],"relativePath":"AKafka/37.md","filePath":"AKafka/37.md"}'),o={name:"AKafka/37.md"},t=i('<h1 id="_8-5-kafka的in-sync-replica-set机制讲解" tabindex="-1">8.5- Kafka的in-sync replica set机制讲解 <a class="header-anchor" href="#_8-5-kafka的in-sync-replica-set机制讲解" aria-label="Permalink to &quot;8.5- Kafka的in-sync replica set机制讲解&quot;">​</a></h1><p><img src="'+r+'" alt="img_140.png" loading="lazy"></p><p>什么是ISR（in-sync replica set)</p><ul><li>leader会维持一个与其保持同步的replica集合，该结合就是ISR，每一个leader partition都有一个ISR, leader动态维护，要保证kafka不丢失message，就要保证ISR 这组集合存活（至少有一个存活），并且消息commit成功</li><li>ISR中的replica必须满足两个条件： <ol><li>replica所在的broker必须处于运行状态</li><li>replica必须能够及时的复制leader发送的记录，不能落后太多（如果落后太多，leader会把它从ISR中移除）</li></ol></li><li>如果leader发生故障，那么就会从ISR中选举出新的leader</li><li>ISR机制是保证Kafka数据可靠性的关键，通过控制ISR中的replica数量，可以平衡可用性和一致性。</li><li>ISR中的replica数量越多，可用性越好，但是同步时间越长，一致性越差；ISR中的replica数量越少，同步时间越短，一致性越好，但是可用性差。</li><li>ISR机制是Kafka实现高可用性的关键，通过控制ISR中的replica数量，可以平衡可用性和一致性。</li><li>Partition leader保持同步的Partition Follower集合，当ISR中的Partition Follower完成数据的同步之后，就会给leader发送ack。</li><li>如果Follower长时间未向Leader发送同步完成请求或同步延迟过高，则该Follower将被踢出ISR。</li><li>如果Follower追上Leader后重新加入ISR，Leader会保存最新的offset信息，以便于新的Follower能够快速完成同步。</li><li>如果Partition follower长时间（replica.lag.time.max.ms)未向leader同步数据，则该Partition Follower将被踢出ISR。</li><li>Partition Leader发生故障之后，就会从ISR中选举新的Leader。</li></ul><h2 id="osr-out-of-sync-replicas" tabindex="-1">OSR（out-of-sync-replicas) <a class="header-anchor" href="#osr-out-of-sync-replicas" aria-label="Permalink to &quot;OSR（out-of-sync-replicas)&quot;">​</a></h2><ul><li>ISR集合中，replica落后太多，被踢出ISR集合，放入OSR集合，OSR集合中的replica不能被选举为leader，只能作为follower。</li><li>OSR集合中的replica可以恢复到ISR集合中，当OSR集合中的replica追上leader之后，会被重新加入到ISR集合中。</li><li>OSR集合中的replica不能被选举为leader，只能作为follower。</li><li>与leader副本分区 同步滞后过多的副本集合</li></ul><h2 id="ar-assign-replicas" tabindex="-1">AR（Assign Replicas) <a class="header-anchor" href="#ar-assign-replicas" aria-label="Permalink to &quot;AR（Assign Replicas)&quot;">​</a></h2><ul><li>AR = ISR + OSR</li><li>AR集合中，replica可以选举为leader，也可以作为follower。</li><li>AR集合中的replica可以恢复到ISR集合中，当OSR集合中的replica追上leader之后，会被重新加入到ISR集合中。</li><li>分区中所有副本统称为AR。</li></ul>',8),s=[t];function c(n,p,d,R,S,_){return l(),e("div",null,s)}const m=a(o,[["render",c]]);export{I as __pageData,m as default};
