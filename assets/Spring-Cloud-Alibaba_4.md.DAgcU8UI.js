import{_ as i,c as l,o as a,a8 as t}from"./chunks/framework.DDO5B0CJ.js";const e="/vitepress-java/assets/img_5.BKI8XARS.png",s="/vitepress-java/assets/img_6.eLZkUpsD.png",S=JSON.parse('{"title":"04-系统架构演变-下","description":"","frontmatter":{},"headers":[],"relativePath":"Spring-Cloud-Alibaba/4.md","filePath":"Spring-Cloud-Alibaba/4.md"}'),_={name:"Spring-Cloud-Alibaba/4.md"},o=t('<h1 id="_04-系统架构演变-下" tabindex="-1">04-系统架构演变-下 <a class="header-anchor" href="#_04-系统架构演变-下" aria-label="Permalink to &quot;04-系统架构演变-下&quot;">​</a></h1><p><img src="'+e+'" alt="img_5.png" loading="lazy"></p><p>微服务架构在某种程度上是面向服务的架构SOA继续发展的下一步，它更加强调服务的“彻底拆分”</p><p>优点：</p><ul><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个业务功能或者业务需求；</li><li>每个服务都运行在独立的进程中，这样就算一个服务挂了，也不会影响其他服务；</li><li>每个服务都提供Rest风格（或者RPC风格）的接口，这样很容易和其他语言或者框架进行集成；</li><li>每个服务都独立部署和升级；</li><li>每个服务都使用轻量级的通信机制，例如HTTP RESTful API，轻量级的RPC框架；</li><li>每个服务都围绕业务能力进行构建，而不是计算机能力，比如可以有一个服务做权限管理，有一个服务做用户管理，可以有一个服务做支付，可以有服务做订单管理；</li><li>每个服务都使用独立的数据库，数据及访问方式也独立；</li></ul><p>缺点：</p><ul><li>分布式系统的复杂性；</li><li>服务间通信成本；</li><li>服务部署依赖；</li><li>服务发现；</li><li>服务健康检查；</li><li>服务均衡负载；</li><li>服务降级；</li><li>服务配置管理；</li><li>服务监控；</li><li>服务容错；</li><li>服务限流；</li><li>服务链路追踪；</li><li>服务自动化测试；</li><li>服务灰度发布；</li><li>服务持续集成；</li><li>服务持续部署；</li><li>服务接口管理；</li><li>服务安全控制；</li><li>服务链路监控；</li><li>服务链路追踪；</li></ul><p><img src="'+s+'" alt="img_6.png" loading="lazy"></p>',8),p=[o];function r(n,c,d,m,g,u){return a(),l("div",null,p)}const f=i(_,[["render",r]]);export{S as __pageData,f as default};
