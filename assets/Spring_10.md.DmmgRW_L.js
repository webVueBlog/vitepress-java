import{_ as s,c as a,o as n,a8 as e}from"./chunks/framework.CbRyzB36.js";const p="/vitepress-java/assets/img_3.BaBcVwdO.png",r="/vitepress-java/assets/img_4.BKoq7k8E.png",l="/vitepress-java/assets/img_5.D48j-DjK.png",S=JSON.parse('{"title":"AutoWired 与 Resource 区别","description":"","frontmatter":{},"headers":[],"relativePath":"Spring/10.md","filePath":"Spring/10.md"}'),i={name:"Spring/10.md"},c=e(`<h1 id="autowired-与-resource-区别" tabindex="-1">AutoWired 与 Resource 区别 <a class="header-anchor" href="#autowired-与-resource-区别" aria-label="Permalink to &quot;AutoWired 与 Resource 区别&quot;">​</a></h1><p>这两个我们在项目中经常能看到，只知道是进行自动注入的，本文就以最简单的方式给大家总结下两者有什么区别，主要是从以下四个维度：</p><ol><li>来源不同；</li><li>依赖查找的顺序不同；</li><li>支持的参数不同；</li><li>依赖注入的用法支持不同；</li></ol><h2 id="来源不同" tabindex="-1">来源不同 <a class="header-anchor" href="#来源不同" aria-label="Permalink to &quot;来源不同&quot;">​</a></h2><p>@Autowired 和 @Resource 来自不同的“父类”，其中 @Autowired 是 Spring2.5 定义的注解</p><p>同时宣布支持@Resource ，而 @Resource 是 Java 定义的注解，它来自于 JSR-250（Java 250 规范提案）</p><h2 id="依赖查找的顺序不同" tabindex="-1">依赖查找的顺序不同 <a class="header-anchor" href="#依赖查找的顺序不同" aria-label="Permalink to &quot;依赖查找的顺序不同&quot;">​</a></h2><p>依赖注入的功能，是通过先在 Spring IoC 容器中查找对象，再将对象注入引入到当前类中。 而查找有分为两种实现：按名称（byName）查找或按类型（byType）查找，其中 @Autowired 和 @Resource 都是既使用了名称查找又使用了类型查找， 但二者进行查找的顺序却截然相反。</p><h2 id="autowired注解" tabindex="-1">@AutoWired注解 <a class="header-anchor" href="#autowired注解" aria-label="Permalink to &quot;@AutoWired注解&quot;">​</a></h2><p>@Autowired 注解在查找要注入的 bean 时，首先会按照类型进行匹配。如果有多个匹配的 bean，就会根据名称进行匹配。 具体来说，如果被注入的属性或构造函数参数的类型在容器中有且只有一个对应的 bean，那么 @Autowired 注解就会直接将该 bean 注入到该属性或构造函数参数中。</p><p>例如：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>private UserService userService;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这个例子中，如果容器中只有一个类型为 UserService 的 bean ，那么它就会被自动注入到userService 属性中。</p><p>但是，如果容器中存在多个类型为 UserService 的 bean，就需要通过名称进行匹配。 此时，可以在 @Autowired 注解中使用 @Qualifier 注解来指定要注入的bean的名称，如果不使用 @Qualifier 注解就会使用属性名。</p><p>例如：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>@Qualifier(&quot;userService2&quot;)</span></span>
<span class="line"><span>private UserService userService;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这个例子中，如果容器中有多个类型为 UserService 的 bean，那么它会根据 @Qualifier 注解中指定的名称来匹配要注入的 bean。 如果找到了名为 &quot;userService2&quot; 的 bean，就会将它注入到 userService 属性中。</p><h2 id="resource注解" tabindex="-1">@Resource注解 <a class="header-anchor" href="#resource注解" aria-label="Permalink to &quot;@Resource注解&quot;">​</a></h2><p>在Spring中，@Resource注解可以通过名称或者类型来注入bean，具体取决于@Resource注解的两个属性：name和type。 如果@Resource注解中指定了name属性，Spring将会根据该名称来查找对应的bean，并将其注入到被注解的属性或者方法参数中。例如：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Resource(name = &quot;myBean&quot;)</span></span>
<span class="line"><span>private MyBean myBean;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述代码将会根据名称“myBean”来查找对应的bean，并将其注入到myBean属性中。</p><p>如果@Resource注解没有指定name属性，而是指定了type属性，Spring将会根据该类型来查找对应的bean，并将其注入到被注解的属性或者方法参数中。例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Resource(type = MyBean.class)</span></span>
<span class="line"><span>private MyBean myBean;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述代码将会根据类型MyBean来查找对应的bean，并将其注入到myBean属性中。</p><p>如果@Resource注解既没有指定name属性，也没有指定type属性，那么它会默认按照名称来查找对应的bean，并将其注入到被注解的属性或者方法参数中。例如：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Resource</span></span>
<span class="line"><span>private MyBean myBean;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述代码将会默认按照名称“myBean”来查找对应的bean，并将其注入到myBean属性中。</p><h2 id="支持的参数不同" tabindex="-1">支持的参数不同 <a class="header-anchor" href="#支持的参数不同" aria-label="Permalink to &quot;支持的参数不同&quot;">​</a></h2><p>@Autowired 和 @Resource 在使用时都可以设置参数，但二者支持的参数以及参数的个数完全不同， 其中 @Autowired 只支持设置一个 required 的参数，而 @Resource 支持 7 个参数，支持的参数如下图所示：</p><p><img src="`+p+'" alt="img_3.png" loading="lazy"></p><p><img src="'+r+`" alt="img_4.png" loading="lazy"></p><h2 id="依赖注入的用法支持不同" tabindex="-1">依赖注入的用法支持不同 <a class="header-anchor" href="#依赖注入的用法支持不同" aria-label="Permalink to &quot;依赖注入的用法支持不同&quot;">​</a></h2><p>@Autowired 和 @Resource 支持依赖注入的用法不同，常见依赖注入有以下 3 种实现：</p><ol><li>属性注入</li><li>构造方法注入</li><li>Setter 注入</li></ol><p>@Autowired 支持属性注入、构造方法注入和 Setter 注入，而 @Resource 只支持属性注入和 Setter 注入</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@RestController</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span>    // 属性注入</span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private UserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RequestMapping(&quot;/add&quot;)</span></span>
<span class="line"><span>    public UserInfo add(String username, String password) {</span></span>
<span class="line"><span>        return userService.add(username, password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span>    // 构造方法注入</span></span>
<span class="line"><span>    private UserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    public UserController(UserService userService) {</span></span>
<span class="line"><span>        this.userService = userService;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RequestMapping(&quot;/add&quot;)</span></span>
<span class="line"><span>    public UserInfo add(String username, String password) {</span></span>
<span class="line"><span>        return userService.add(username, password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span>    // Setter 注入</span></span>
<span class="line"><span>    private UserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    public void setUserService(UserService userService) {</span></span>
<span class="line"><span>        this.userService = userService;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RequestMapping(&quot;/add&quot;)</span></span>
<span class="line"><span>    public UserInfo add(String username, String password) {</span></span>
<span class="line"><span>        return userService.add(username, password);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p><img src="`+l+'" alt="img_5.png" loading="lazy"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>@Autowired 和 @Resource 都是用来实现依赖注入的注解（在 Spring/Spring Boot 项目中），但二者却有着 4 点不同：</p><p>来源不同：@Autowired 来自 Spring 框架，而 @Resource 来自于（Java）JSR-250；</p><p>依赖查找的顺序不同：@Autowired 先根据类型再根据名称查询，而 @Resource 先根据名称再根据类型查询；</p><p>支持的参数不同：@Autowired 只支持设置 1 个参数，而 @Resource 支持设置 7 个参数；</p><p>依赖注入的用法支持不同：@Autowired 既支持构造方法注入，又支持属性注入和 Setter 注入，而 @Resource 只支持属性注入和 Setter 注入；</p>',43),t=[c];function u(o,b,d,m,h,v){return n(),a("div",null,t)}const _=s(i,[["render",u]]);export{S as __pageData,_ as default};
