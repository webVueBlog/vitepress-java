import{_ as o,c as a,o as t,a8 as r}from"./chunks/framework.DDO5B0CJ.js";const g=JSON.parse('{"title":"Springboot的自动配置原理？","description":"","frontmatter":{},"headers":[],"relativePath":"SpringBoot/6.md","filePath":"SpringBoot/6.md"}'),e={name:"SpringBoot/6.md"},i=r('<h1 id="springboot的自动配置原理" tabindex="-1">Springboot的自动配置原理？ <a class="header-anchor" href="#springboot的自动配置原理" aria-label="Permalink to &quot;Springboot的自动配置原理？&quot;">​</a></h1><h2 id="引入-enableautoconfiguration" tabindex="-1">引入@EnableAutoConfiguration： <a class="header-anchor" href="#引入-enableautoconfiguration" aria-label="Permalink to &quot;引入@EnableAutoConfiguration：&quot;">​</a></h2><p>在Spring Boot应用程序的主配置类（通常是带有@SpringBootApplication注解的类）中， 通常会引入@EnableAutoConfiguration注解，该注解负责启动自动配置功能。</p><h2 id="enableautoconfiguration引入了-import" tabindex="-1">@EnableAutoConfiguration引入了@Import： <a class="header-anchor" href="#enableautoconfiguration引入了-import" aria-label="Permalink to &quot;@EnableAutoConfiguration引入了@Import：&quot;">​</a></h2><p>@EnableAutoConfiguration注解实际上是通过@Import注解引入的。这意味着它会导入其他配置类， 这些配置类包含了Spring Boot自动配置的逻辑。</p><h2 id="解析-import注解" tabindex="-1">解析@Import注解： <a class="header-anchor" href="#解析-import注解" aria-label="Permalink to &quot;解析@Import注解：&quot;">​</a></h2><p>当Spring容器启动时，会解析@Import注解，并加载相应的配置。</p><h2 id="deferredimportselector" tabindex="-1">deferredImportSelector： <a class="header-anchor" href="#deferredimportselector" aria-label="Permalink to &quot;deferredImportSelector：&quot;">​</a></h2><p>通过@Import导入的配置类中可能包含了一个deferredImportSelector， 它的作用是确保Spring Boot的自动配置类在最后加载，以便方便扩展和覆盖。</p><h2 id="读取meta-inf-spring-factories文件" tabindex="-1">读取META-INF/spring.factories文件： <a class="header-anchor" href="#读取meta-inf-spring-factories文件" aria-label="Permalink to &quot;读取META-INF/spring.factories文件：&quot;">​</a></h2><p>Spring Boot通过SPI（Service Provider Interface）机制， 读取类路径下的META-INF/spring.factories文件，该文件包含了各种自动配置类的配置。</p><h2 id="过滤出autoconfigurationclass" tabindex="-1">过滤出AutoConfigurationClass： <a class="header-anchor" href="#过滤出autoconfigurationclass" aria-label="Permalink to &quot;过滤出AutoConfigurationClass：&quot;">​</a></h2><p>从spring.factories文件中，Spring Boot会过滤出所有AutoConfigurationClass类型的类，这些类包含了自动配置的具体实现。</p><h2 id="条件化加载" tabindex="-1">条件化加载： <a class="header-anchor" href="#条件化加载" aria-label="Permalink to &quot;条件化加载：&quot;">​</a></h2><p>最后，Spring Boot会根据条件（@ConditionalXXX注解）来排除或包含特定的自动配置类。 这些条件会根据应用程序的环境和配置动态生效。</p><p>总结起来，Spring Boot的自动配置原理是通过@EnableAutoConfiguration注解引入自动配置逻辑，然后解析@Import注解， 加载各种配置类，包括deferredImportSelector和自动配置类。通过SPI机制读取spring.factories文件，过滤出自动配置类， 并根据条件化配置来动态加载这些类，从而实现自动配置的功能。这种机制使得Spring Boot应用程序可以根据环境和需求自动配置， 极大地简化了开发和部署的工作。</p>',16),n=[i];function p(l,s,c,u,d,f){return t(),a("div",null,n)}const m=o(e,[["render",p]]);export{g as __pageData,m as default};
