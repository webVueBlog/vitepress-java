import{_ as a,c as t,o as e,a8 as s}from"./chunks/framework.DDO5B0CJ.js";const p="/vitepress-java/assets/img_123.D4I2K3fp.png",i="/vitepress-java/assets/img_124.Dnt2g9zZ.png",o="/vitepress-java/assets/img_125.D3P6iCL3.png",n="/vitepress-java/assets/img_126.CHKpUrmk.png",r="/vitepress-java/assets/img_127.BpLJQe0s.png",v=JSON.parse('{"title":"第 22 章 使 用 视 图","description":"","frontmatter":{},"headers":[],"relativePath":"MySQL/22.md","filePath":"MySQL/22.md"}'),_={name:"MySQL/22.md"},l=s('<h1 id="第-22-章-使-用-视-图" tabindex="-1">第 22 章 使 用 视 图 <a class="header-anchor" href="#第-22-章-使-用-视-图" aria-label="Permalink to &quot;第 22 章 使 用 视 图&quot;">​</a></h1><p>视图</p><p>需要MySQL 5 MySQL 5添加了对视图的支持。</p><p>SELECT语句 从3个表中检索数据：</p><p><img src="'+p+'" alt="img_123.png" loading="lazy"></p><p><img src="'+i+'" alt="img_124.png" loading="lazy"></p><blockquote><p>性能问题 因为视图不包含数据，所以每次使用视图时，都 必须处理查询执行时所需的任一个检索。如果你用多个联结 和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能 下降得很厉害。因此，在部署使用了大量视图的应用前，应 该进行</p></blockquote><p>视图用CREATE VIEW语句来创建。</p><p>使用SHOW CREATE VIEW viewname；来查看创建视图的语句。</p><p>用DROP删除视图，其语法为DROP VIEW viewname;。</p><p>更新视图时，可以先用DROP再用CREATE，也可以直接用CREATE OR REPLACE VIEW。</p><h2 id="利用视图简化复杂的联结" tabindex="-1">利用视图简化复杂的联结 <a class="header-anchor" href="#利用视图简化复杂的联结" aria-label="Permalink to &quot;利用视图简化复杂的联结&quot;">​</a></h2><p>视图的最常见的应用之一是隐藏复杂的SQL</p><p><img src="'+o+'" alt="img_125.png" loading="lazy"></p><p><img src="'+n+'" alt="img_126.png" loading="lazy"></p><p><img src="'+r+'" alt="img_127.png" loading="lazy"></p><h2 id="用视图过滤不想要的数据" tabindex="-1">用视图过滤不想要的数据 <a class="header-anchor" href="#用视图过滤不想要的数据" aria-label="Permalink to &quot;用视图过滤不想要的数据&quot;">​</a></h2><p>视图的另一个最常见应用是，使用它过滤不想要的数据。</p><blockquote><p>将视图用于检索 一般，应该将视图用于检索（SELECT语句） 而不用于更新（INSERT、UPDATE和DELETE）。</p></blockquote>',19),c=[l];function m(g,d,E,h,u,S){return e(),t("div",null,c)}const P=a(_,[["render",m]]);export{v as __pageData,P as default};
