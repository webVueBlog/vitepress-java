import{_ as a,c as e,o as t,a8 as r}from"./chunks/framework.DDO5B0CJ.js";const n="/vitepress-java/assets/img_485.B8-WxeEf.png",s="/vitepress-java/assets/img_486.BEyAjaVa.png",S=JSON.parse('{"title":"47-Sleuth介绍","description":"","frontmatter":{},"headers":[],"relativePath":"Spring-Cloud-Alibaba/47.md","filePath":"Spring-Cloud-Alibaba/47.md"}'),o={name:"Spring-Cloud-Alibaba/47.md"},i=r('<h1 id="_47-sleuth介绍" tabindex="-1">47-Sleuth介绍 <a class="header-anchor" href="#_47-sleuth介绍" aria-label="Permalink to &quot;47-Sleuth介绍&quot;">​</a></h1><p><img src="'+n+'" alt="img_485.png" loading="lazy"></p><h2 id="trace" tabindex="-1">Trace <a class="header-anchor" href="#trace" aria-label="Permalink to &quot;Trace&quot;">​</a></h2><p>由一组Trace Id相同的Span串联形成一个树状结构。为了实现请求跟踪，当请求到达分布式系统的入口端点时，只需要服务跟踪框架为该请求创建 一个唯一的标识，为TraceId，同时在分布式系统内部流转的时候，将TraceId携带，直到请求返回。那么我们就可以通过TraceId将请求链路串起来。</p><h2 id="span" tabindex="-1">Span <a class="header-anchor" href="#span" aria-label="Permalink to &quot;Span&quot;">​</a></h2><p>代码执行单元，比如一个HTTP请求，一个RPC调用，一个数据库操作，一个消息队列调用等。Span包含一系列的Annotation， 用于记录一个请求中关键节点的时间戳，比如请求开始时间，请求结束时间，RPC调用开始时间，RPC调用结束时间等。</p><p><img src="'+s+'" alt="img_486.png" loading="lazy"></p>',7),l=[i];function _(c,p,d,h,m,u){return t(),e("div",null,l)}const T=a(o,[["render",_]]);export{S as __pageData,T as default};
