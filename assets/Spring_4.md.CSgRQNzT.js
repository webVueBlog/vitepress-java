import{_ as a,c as p,o as s,a8 as n}from"./chunks/framework.CbRyzB36.js";const u=JSON.parse('{"title":"Spring AOP and AspectJ AOP 有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"Spring/4.md","filePath":"Spring/4.md"}'),e={name:"Spring/4.md"},t=n(`<h1 id="spring-aop-and-aspectj-aop-有什么区别" tabindex="-1">Spring AOP and AspectJ AOP 有什么区别？ <a class="header-anchor" href="#spring-aop-and-aspectj-aop-有什么区别" aria-label="Permalink to &quot;Spring AOP and AspectJ AOP 有什么区别？&quot;">​</a></h1><p>首先说下他们之间的关系：</p><p>当在Spring中要使用@Aspect、@Before.等这些注解的时候， 就需要添加AspectJ相关依赖</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span></span>
<span class="line"><span>  &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span></span>
<span class="line"><span>  &lt;version&gt;1.9.5&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Spring Aop主要用到了AspectJ的@PointCut 切点解析能力和切点匹配能力。 @Aspect、@Before.等这些注解都是由AspectJ 发明的，</p><p>AspectJ 能干很多 Spring AOP 干不了的事情，它是 AOP 编程的完全解决方案。Spring AOP 致力于解决的是企业级开发中最普遍的 AOP 需求（方法增强）， 而不是力求成为一个像 AspectJ 一样的 AOP 编程完全解决方案。</p><p>区别：</p><p>（1）AspectJ 主要通过在编译阶段生成代理类，也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中， 运行的时候就是增强之后的对象，通过这种方式实现AOP。</p><p>SpringAOP并没有使用AspectJ的织入Java字节功能来增强对象。而是使用的动态代理来增强对象。 默认地，如果使用接口的，用 JDK 提供的动态代理实现，如果没有接口，使用 CGLIB 实现。 Spring AOP 在容器启动的时候需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 那么好。</p><p>（2）AspectJ 能够对 Java 源码进行编译， 所以可以实现一些 Spring AOP 无法实现的功能。 比如使用 AspectJ 可以方便地实现一个类中的多个方法进行事务管理。而 Spring AOP 实现多个方法进行事务管理，必须创建一个切面。</p>`,10),r=[t];function i(c,l,o,d,g,A){return s(),p("div",null,r)}const P=a(e,[["render",i]]);export{u as __pageData,P as default};
