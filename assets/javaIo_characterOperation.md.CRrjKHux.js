import{_ as a,c as e,o as t,a8 as s}from"./chunks/framework.CbRyzB36.js";const n="/vitepress-java/assets/img_4.9plF43nX.png",g=JSON.parse('{"title":"四、字符操作","description":"","frontmatter":{},"headers":[],"relativePath":"javaIo/characterOperation.md","filePath":"javaIo/characterOperation.md"}'),r={name:"javaIo/characterOperation.md"},i=s(`<h1 id="四、字符操作" tabindex="-1">四、字符操作 <a class="header-anchor" href="#四、字符操作" aria-label="Permalink to &quot;四、字符操作&quot;">​</a></h1><h2 id="编码与解码" tabindex="-1">编码与解码 <a class="header-anchor" href="#编码与解码" aria-label="Permalink to &quot;编码与解码&quot;">​</a></h2><p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p><p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p><ul><li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li><li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li><li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节</li></ul><p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的 是 Little Endian，也就是小端。</p><p>Java 的内存编码使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式， 而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字 节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来 存储</p><h2 id="string-的编码方式" tabindex="-1">String 的编码方式 <a class="header-anchor" href="#string-的编码方式" aria-label="Permalink to &quot;String 的编码方式&quot;">​</a></h2><p>String 可以看成一个字符序列，可以指定一个编码方式将它编码为字节序列，也可以 指定一个编码方式将一个字节序列解码为 String。</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>String str1 = &quot;中文&quot;;</span></span>
<span class="line"><span>byte[] bytes = str1.getBytes(&quot;UTF-8&quot;);</span></span>
<span class="line"><span>String str2 = new String(bytes, &quot;UTF-8&quot;);</span></span>
<span class="line"><span>System.out.println(str2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在调用无参数 getBytes() 方法时，默认的编码方式不是 UTF-16be。双字节编码的好 处是可以使用一个 char 存储中文和英文，而将 String 转为 bytes[] 字节数组就不再需 要这个好处，因此也就不再需要双字节编码。getBytes() 的默认编码方式与平台有 关，一般为 UTF-8。</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>byte[] bytes = str1.getBytes();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="reader-与-writer" tabindex="-1">Reader 与 Writer <a class="header-anchor" href="#reader-与-writer" aria-label="Permalink to &quot;Reader 与 Writer&quot;">​</a></h2><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符。但是在程序中操 作的通常是字符形式的数据，因此需要提供对字符进行操作的方法。</p><p>InputStreamReader 实现从字节流解码成字符流；</p><p>OutputStreamWriter 实现字符流编码成为字节流。</p><h2 id="实现逐行输出文本文件的内容" tabindex="-1">实现逐行输出文本文件的内容 <a class="header-anchor" href="#实现逐行输出文本文件的内容" aria-label="Permalink to &quot;实现逐行输出文本文件的内容&quot;">​</a></h2><p><img src="`+n+'" alt="img_4.png" loading="lazy"></p>',18),l=[i];function p(o,c,d,h,u,b){return t(),e("div",null,l)}const _=a(r,[["render",p]]);export{g as __pageData,_ as default};
