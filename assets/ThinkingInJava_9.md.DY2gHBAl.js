import{_ as e,c as t,o as s,l as a,a as n}from"./chunks/framework.CbRyzB36.js";const o="/vitepress-java/assets/img_4.oBrAe9L5.png",i="/vitepress-java/assets/img_5.hylaiRKU.png",T=JSON.parse('{"title":"第 9 章 违例差错控制","description":"","frontmatter":{},"headers":[],"relativePath":"ThinkingInJava/9.md","filePath":"ThinkingInJava/9.md"}'),_={name:"ThinkingInJava/9.md"},r=a("h1",{id:"第-9-章-违例差错控制",tabindex:"-1"},[n("第 9 章 违例差错控制 "),a("a",{class:"header-anchor",href:"#第-9-章-违例差错控制","aria-label":'Permalink to "第 9 章 违例差错控制"'},"​")],-1),l=a("p",null,[a("img",{src:o,alt:"img_4.png",loading:"lazy"})],-1),c=a("p",null,[a("img",{src:i,alt:"img_5.png",loading:"lazy"})],-1),d=a("p",null,"通过先进的错误纠正与恢复机制，我们可以有效地增强代码的健壮程度。对我们编写的每个程序来说，错误 恢复都属于一个基本的考虑目标。它在Java 中显得尤为重要，因为该语言的一个目标就是创建不同的程序组 件，以便其他用户（客户程序员）使用。为构建一套健壮的系统，每个组件都必须非常健壮。",-1),p=a("p",null,"在Java 里，违例控制的目的是使用尽可能精简的代码创建大型、可靠的应用程序，同时排除程序里那些不能 控制的错误。",-1),h=a("p",null,"违例的概念很难掌握。但只有很好地运用它，才可使自己的项目立即获得显著的收益。Java 强迫遵守违例所 有方面的问题，所以无论库设计者还是客户程序员，都能够连续一致地使用它。",-1),m=[r,l,c,d,p,h];function g(v,u,f,J,k,x){return s(),t("div",null,m)}const $=e(_,[["render",g]]);export{T as __pageData,$ as default};
