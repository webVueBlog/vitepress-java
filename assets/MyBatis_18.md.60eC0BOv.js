import{_ as e,c as t,o as s,a8 as a}from"./chunks/framework.DDO5B0CJ.js";const m=JSON.parse('{"title":"讲讲Mybatis 的一级、二级缓存","description":"","frontmatter":{},"headers":[],"relativePath":"MyBatis/18.md","filePath":"MyBatis/18.md"}'),i={name:"MyBatis/18.md"},p=a('<h1 id="讲讲mybatis-的一级、二级缓存" tabindex="-1">讲讲Mybatis 的一级、二级缓存 <a class="header-anchor" href="#讲讲mybatis-的一级、二级缓存" aria-label="Permalink to &quot;讲讲Mybatis 的一级、二级缓存&quot;">​</a></h1><p>MyBatis提供了两种级别的缓存：一级缓存（本地缓存）和二级缓存（全局缓存）。它们分别位于不同的作用范围，有不同的特性和使用场景。</p><p>一级缓存（本地缓存）：</p><p>作用范围： 一级缓存是在SqlSession的生命周期内有效，也就是说，每个SqlSession拥有独立的一级缓存。</p><p>默认开启： 一级缓存在MyBatis中默认是开启的，无需额外配置。</p><p>特点： 当执行查询操作时，查询的结果会被缓存在当前SqlSession中。如果再次执行相同的查询，MyBatis会首先尝试从缓存中获取数据，而不再访问数据库。</p><p>自动刷新： MyBatis会在执行insert、update、delete等写操作时自动清空一级缓存，以保持数据的一致性。</p><p>二级缓存（全局缓存）：</p><p>作用范围： 二级缓存是在多个SqlSession之间共享的，即多个SqlSession可以共享同一个二级缓存。</p><p>配置开启： 二级缓存需要手动配置开启，需要在映射文件的<code>&lt;mapper&gt;</code>标签下添加<code>&lt;cache&gt;</code>元素。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;cache eviction=&quot;LRU&quot; flushInterval=&quot;60000&quot; size=&quot;1024&quot; readOnly=&quot;true&quot;/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>特点： 二级缓存能够跨SqlSession共享查询结果，有效减少数据库访问次数。它的数据存储在全局范围的缓存中，可以由多个SqlSession访问。</p><p>缓存策略： 你可以根据需求选择不同的缓存策略（例如LRU、FIFO等），以及配置缓存的大小、刷新间隔等参数。</p><p>注意事项： 二级缓存可以缓存的对象需要是可序列化的，要确保对象可以正确地序列化和反序列化。 另外，对于关联数据的更新操作，需要手动清除相关的二级缓存，以避免脏数据的问题。</p><p>需要注意的是，虽然缓存可以提高查询性能，但不合理的使用缓存可能导致数据不一致等问题，特别是在分布式环境下。 因此，在使用缓存时需要根据业务需求和性能测试结果进行合理的配置和管理。</p>',15),o=[p];function n(l,c,r,d,_,u){return s(),t("div",null,o)}const S=e(i,[["render",n]]);export{m as __pageData,S as default};
