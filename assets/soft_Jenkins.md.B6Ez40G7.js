import{_ as a,c as e,o as t,a8 as s}from"./chunks/framework.CbRyzB36.js";const p="/vitepress-java/assets/img_32.BxRjsQA_.png",i="/vitepress-java/assets/img_33.phXaReZO.png",n="/vitepress-java/assets/img_34.r9cA7prd.png",o="/vitepress-java/assets/img_35.ByvUGOc6.png",r="/vitepress-java/assets/img_36.BfE1WNPx.png",l="/vitepress-java/assets/img_37.DtKepgG0.png",g="/vitepress-java/assets/img_38.DkWo219Y.png",m="/vitepress-java/assets/img_39.DneT4Gjq.png",_="/vitepress-java/assets/img_40.5sqfnbi4.png",c="/vitepress-java/assets/img_41.Cizx1EGc.png",u="/vitepress-java/assets/img_42.DSslZ1x3.png",d="/vitepress-java/assets/img_43.BB4xHQnH.png",h="/vitepress-java/assets/img_44.BD2ifoxj.png",q="/vitepress-java/assets/img_45.NW-8o0Af.png",v="/vitepress-java/assets/img_46.6MQIwuId.png",b="/vitepress-java/assets/img_47.DV890Nw9.png",k="/vitepress-java/assets/img_48.CIOdmE0f.png",j="/vitepress-java/assets/img_49.DgtrHBIW.png",B=JSON.parse('{"title":"Jenkins 运维","description":"","frontmatter":{},"headers":[],"relativePath":"soft/Jenkins.md","filePath":"soft/Jenkins.md"}'),x={name:"soft/Jenkins.md"},f=s('<h1 id="jenkins-运维" tabindex="-1">Jenkins 运维 <a class="header-anchor" href="#jenkins-运维" aria-label="Permalink to &quot;Jenkins 运维&quot;">​</a></h1><h2 id="一、jenkins是什么" tabindex="-1">一、jenkins是什么？ <a class="header-anchor" href="#一、jenkins是什么" aria-label="Permalink to &quot;一、jenkins是什么？&quot;">​</a></h2><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具， 起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。</p><p>Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。 常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p><h2 id="二、ci-cd是什么" tabindex="-1">二、CI/CD是什么？ <a class="header-anchor" href="#二、ci-cd是什么" aria-label="Permalink to &quot;二、CI/CD是什么？&quot;">​</a></h2><p>CI(Continuous integration，中文意思是持续集成)是一种软件开发时间。</p><p>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 借用网络图片对CI加以理解。</p><p><img src="'+p+'" alt="img_32.png" loading="lazy"></p><p>CD(Continuous Delivery， 中文意思持续交付)是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境(类生产环境)中。</p><p>比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging环境中更多的测试。 如果代码没有问题，可以继续手动部署到生产环境。下图反应的是CI/CD 的大概工作模式。</p><p><img src="'+i+'" alt="img_33.png" loading="lazy"></p><p>登录Jenkins， 点击左侧的新建，创建新的构建任务。</p><p><img src="'+n+'" alt="img_34.png" loading="lazy"></p><p><img src="'+o+'" alt="img_35.png" loading="lazy"></p><p>下图是构建任务设置界面，可以看到上方的几个选项&quot;General&quot;, &quot;源码管理&quot;， &quot;构建触发器&quot;，&quot;构建环境&quot;， &quot;构建&quot;， &quot;构建后操作&quot;。</p><p>下面逐一介绍。</p><p><img src="'+r+'" alt="img_36.png" loading="lazy"></p><h2 id="_1-general" tabindex="-1">1.General <a class="header-anchor" href="#_1-general" aria-label="Permalink to &quot;1.General&quot;">​</a></h2><p>General是构建任务的一些基本配置。名称，描述之类的。</p><p><img src="'+l+'" alt="img_37.png" loading="lazy"></p><p>项目名称: 是刚才创建构建任务步骤设置的，当然在这里也可以更改。</p><p>描述: 对构建任务的描述。</p><p>丢弃旧的构建： 服务器资源是有限的，有时候保存了太多的历史构建，会导致Jenkins速度变慢，并且服务器硬盘资源也会被占满。 当然下方的&quot;保持构建天数&quot; 和 保持构建的最大个数是可以自定义的，需要根据实际情况确定一个合理的值。</p><p>其他几个选项在这里不做介绍，有兴趣的可以查看Jenkins&quot;帮助信息&quot;， 会有一个大概的介绍。不过这些&quot;帮助信息&quot;都是英文的。</p><p><img src="'+g+'" alt="img_38.png" loading="lazy"></p><h2 id="_2-源码管理" tabindex="-1">2.源码管理 <a class="header-anchor" href="#_2-源码管理" aria-label="Permalink to &quot;2.源码管理&quot;">​</a></h2><p>源码管理就是配置你代码的存放位置。</p><p><img src="'+m+'" alt="img_39.png" loading="lazy"></p><p>Git: 支持主流的github 和gitlab代码仓库。因我们的研发团队使用的是gitlab，所以下面我只会对该项进行介绍。</p><p>Repository URL：仓库地址</p><p>Credentials：凭证。可以使用HTTP方式的用户名密码，也可以是RSA文件。 但要通过后面的&quot;ADD&quot;按钮添加凭证。</p><p>Branches to build：构建的分支。*/master表示master分支，也可以设置为其他分支。</p><p>源码浏览器：你所使用的代码仓库管理工具，如github, gitlab.</p><p>URL：填入上方的仓库地址即可。</p><p>Version: 8.7   这个是我们gitlab服务器的版本。</p><p>Subversion：就是SVN，这里不作介绍。</p><h2 id="_3-构建触发器" tabindex="-1">3.构建触发器 <a class="header-anchor" href="#_3-构建触发器" aria-label="Permalink to &quot;3.构建触发器&quot;">​</a></h2><p>构建触发器，顾名思义，就是构建任务的触发器。</p><p><img src="'+_+'" alt="img_40.png" loading="lazy"></p><p>触发远程构建(例如，使用脚本): 该选项会提供一个接口，可以用来在代码层面触发构建。这里不做介绍，后期可能会用到。</p><p>Build after other projects are built： 该选项意思是&quot;在其他projects构建后构建&quot;。这里不作介绍，后期可能会用到该选项。</p><p>Build periodically： 周期性的构建。很好理解，就是每隔一段时间进行构建。日程表类似        linux crontab书写格式。如下图的设置，表示每隔30分钟进行一次构建。</p><p><img src="'+c+'" alt="img_41.png" loading="lazy"></p><p>Build when a change is pushed to GitLab：当有更改push到gitlab代码仓库，即触发构建。后面会有一个触发构建的地址，一般被称为webhooks。需要将这个地址配置到gitlab中，webhooks如何配置后面介绍。这个是常用的构建触发器。</p><p>Poll SCM：该选项是配合上面这个选项使用的。当代码仓库发生改动，jenkins并不知道。需要配置这个选项，周期性的去检查代码仓库是否发生改动。</p><p><img src="'+u+'" alt="img_42.png" loading="lazy"></p><h2 id="_4-构建环境" tabindex="-1">4.构建环境 <a class="header-anchor" href="#_4-构建环境" aria-label="Permalink to &quot;4.构建环境&quot;">​</a></h2><p>构建环境就是构建之前的一些准备工作，如指定构建工具(在这里我使用ant)。</p><p><img src="'+d+'" alt="img_43.png" loading="lazy"></p><p>With Ant：选择这个工具，并指定ant版本和jdk版本。这两个工具的版本我都事先在服务器上安装，并且在jenkins全局工具中配置好了。</p><p>其他选项不作介绍，同样可以查看&quot;帮助信息&quot; 获得使用帮助。</p><h2 id="_5-构建" tabindex="-1">5.构建 <a class="header-anchor" href="#_5-构建" aria-label="Permalink to &quot;5.构建&quot;">​</a></h2><p>选择下方的增加构建步骤。</p><p><img src="'+h+'" alt="img_44.png" loading="lazy"></p><p>可以选择的项很多。这里就介绍&quot;Invoke Ant&quot; 和&quot;Execute shell&quot;.</p><p>Eexcute shell： 执行shell命令，该工具是针对linux环境的，windows环境也有对应的工            具&quot;Execute Windows batch command&quot;。 在构建之前，可能我们需要执行一些命令，比如压缩包的解压之类的。为了演示，我就简单的执行  &quot;echo $RANDOM&quot; 这样的linux shell下生产随机数命令。</p><p>Invoke Ant：Ant是一款java项目构建工具</p><p><img src="'+q+'" alt="img_45.png" loading="lazy"></p><p>Ant Version： 选择Ant版本。这个ant版本是安装在jenkins服务器上的版本，并且需要在jenkins&quot;系统工具&quot;中设置好。</p><p>Targets：要执行的操作，一行一个操作任务。以上图为例，build是构建，tar是打包。</p><p>Build File: 是Ant构建的配置文件，如果不指定，则是在项目路径下的workspace目录中的build.xml。build.xml文件具体怎么配置，后面再细讲。</p><p>properties: 设定一些变量，这些变量可以在build.xml 中被引用。</p><p>Send files or execute commands over SSH：发送文件到远程主机或执行命令(脚本)</p><p><img src="'+v+'" alt="img_46.png" loading="lazy"></p><p>Name: SSH Server的名称。SSH Server可以在jenkins-系统设置中配置。</p><p>source files: 需要发送给远程主机的源文件。</p><p>Remove prefix: 移除前面的路径。如果不设置这个参数，则远程主机会自动创建构建源 source files 包含的那个路径。</p><p>Remote directory: 远程主机目录。</p><p>Exec command：在远程主机上执行的命令，或者执行的脚本。</p><h2 id="_6-构建后操作" tabindex="-1">6.构建后操作 <a class="header-anchor" href="#_6-构建后操作" aria-label="Permalink to &quot;6.构建后操作&quot;">​</a></h2><p>构建后操作，就是对project构建完成后的一些后续操作，比如生成相应的代码测试报告。</p><p><img src="'+b+'" alt="img_47.png" loading="lazy"></p><p><img src="'+k+'" alt="img_48.png" loading="lazy"></p><p>Publish Clover PHP Coverage Report：发布代码覆盖率xml格式的文件报告。路径会在&quot;build.xml&quot;文件中定义</p><p>Publish HTML reports：发布代码覆盖率的HTML报告。</p><p>Report Crap: 发布crap报告。</p><p>E-mail Notification:  邮件通知，构建完成后发邮件到指定的邮箱。</p><p>以上配置完成后，点击保存。</p><h2 id="_7-其他相关配置" tabindex="-1">7.其他相关配置 <a class="header-anchor" href="#_7-其他相关配置" aria-label="Permalink to &quot;7.其他相关配置&quot;">​</a></h2><p>SSH Server配置</p><p>登录jenkins -- 系统管理 -- 系统设置</p><p>配置请看下图</p><p><img src="'+j+'" alt="img_49.png" loading="lazy"></p><p>SSH Servers: 由于jenkins服务器公钥文件我已经配置好，所以之后新增SSH Servers 只需要配置这一项即可。</p><p>Name： 自定义，需要全局唯一。</p><p>HostName: 主机名，直接用ip地址即可。</p><p>Username: 新增Server的用户名，这里配置的是root。</p><p>Remote Directory: 远程目录。jenkins服务器发送文件给新增的server默认是在这个目录。</p><h2 id="构建稳定性" tabindex="-1">构建稳定性 <a class="header-anchor" href="#构建稳定性" aria-label="Permalink to &quot;构建稳定性&quot;">​</a></h2><p>构建稳定性用天气表示：晴、晴转多云、多云、小雨、雷阵雨。天气越好表示构建越稳定，反之亦然。</p>',90),S=[f];function y(C,P,z,D,A,H){return t(),e("div",null,S)}const J=a(x,[["render",y]]);export{B as __pageData,J as default};
