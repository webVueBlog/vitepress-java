import{_ as s,c as a,o as p,a8 as i}from"./chunks/framework.DDO5B0CJ.js";const t="/vitepress-java/assets/img_181._NvmzeSv.png",g="/vitepress-java/assets/img_182.c7GmkugE.png",e="/vitepress-java/assets/img_183.DXlMb1Ip.png",r="/vitepress-java/assets/img_184.CqfE5g93.png",_="/vitepress-java/assets/img_185.C97rqB6g.png",n="/vitepress-java/assets/img_186.BWBnH-fB.png",o="/vitepress-java/assets/img_187.CqHxgUEl.png",m="/vitepress-java/assets/img_188.Dm8Ts05I.png",l="/vitepress-java/assets/img_189.Dz26cdPX.png",c="/vitepress-java/assets/img_190.aEzIY6T_.png",v="/vitepress-java/assets/img_191.L3sIXYe3.png",d="/vitepress-java/assets/img_192.CgmTObj6.png",k="/vitepress-java/assets/img_193.DltHuITR.png",y="/vitepress-java/assets/img_194.B31g3V-B.png",z="/vitepress-java/assets/img_195.CrH_RTam.png",j="/vitepress-java/assets/img_196.Dniy9bHS.png",f="/vitepress-java/assets/img_197.WZXpeAJB.png",h="/vitepress-java/assets/img_198.DARZDMRd.png",b="/vitepress-java/assets/img_199.eQlGyXd-.png",B="/vitepress-java/assets/img_200.8FrnHseR.png",u="/vitepress-java/assets/img_201.CCE9Wdue.png",T="/vitepress-java/assets/img_202.Bz1gwsnL.png",C="/vitepress-java/assets/img_203.g3soUH9k.png",E="/vitepress-java/assets/img_204.y0gUygW6.png",q="/vitepress-java/assets/img_205.RhLi2EpE.png",D="/vitepress-java/assets/img_206.BbVFyLqZ.png",S="/vitepress-java/assets/img_207.BNlfdMx8.png",P="/vitepress-java/assets/img_208.E2SkmK2t.png",x="/vitepress-java/assets/img_209.B3pce1El.png",R="/vitepress-java/assets/img_210.j0qVcaPJ.png",A="/vitepress-java/assets/img_211.CltmCkQE.png",H="/vitepress-java/assets/img_212.BEMWAcJW.png",I="/vitepress-java/assets/img_213.D3aACvJb.png",U=JSON.parse('{"title":"头条面试如何配置和优化Kafka Broker端参数","description":"","frontmatter":{},"headers":[],"relativePath":"kafka/3.md","filePath":"kafka/3.md"}'),V={name:"kafka/3.md"},W=i('<h1 id="头条面试如何配置和优化kafka-broker端参数" tabindex="-1">头条面试如何配置和优化Kafka Broker端参数 <a class="header-anchor" href="#头条面试如何配置和优化kafka-broker端参数" aria-label="Permalink to &quot;头条面试如何配置和优化Kafka Broker端参数&quot;">​</a></h1><p><img src="'+t+'" alt="img_181.png" loading="lazy"></p><p><img src="'+g+'" alt="img_182.png" loading="lazy"></p><p>socket.receive.buffer.bytes</p><p>default:102400</p><p>这是在操作系统内核层面，通过配置，socket接收缓冲区的大小，能够，提高消息的发送速度，在操作系统表面，这个本身的层面呢， 也有一个Socket接收缓冲区的大小，这个是kafka给我们默认设置的。值是102400。</p><p>如果我们想用操作系统层面的，Socket缓冲区的大小。直接把这个参数值设置为-1就可以了。</p><p>当我们写入流量增大时，操作系统，本身是通过TCP的窗口调整机制。为了保证数据能够传输，他就不得不降低数据的传输速度。</p><p>表面而言，就是我们发送消息的时候出现延迟，</p><p>因此，合理的设置这个参数值的作用，就能够尽量的降低网络的延迟成本。比如说，如果网络的往返延迟也就是RTT，这个限制的时间是100ms。</p><p><img src="'+e+'" alt="img_183.png" loading="lazy"></p><p><img src="'+r+'" alt="img_184.png" loading="lazy"></p><p><img src="'+_+'" alt="img_185.png" loading="lazy"></p><p><img src="'+n+'" alt="img_186.png" loading="lazy"></p><p><img src="'+o+'" alt="img_187.png" loading="lazy"></p><p><img src="'+m+'" alt="img_188.png" loading="lazy"></p><p><img src="'+l+'" alt="img_189.png" loading="lazy"></p><p><img src="'+c+'" alt="img_190.png" loading="lazy"></p><p>异步flush，也是可能存在消息丢失的问题吧</p><p>是的，但是还有多副本的加持</p><p>应用开发建议先学rocketmq，大数据开发先学kafka</p><p><img src="'+v+'" alt="img_191.png" loading="lazy"></p><p><img src="'+d+'" alt="img_192.png" loading="lazy"></p><p><img src="'+k+'" alt="img_193.png" loading="lazy"></p><p><img src="'+y+'" alt="img_194.png" loading="lazy"></p><p><img src="'+z+'" alt="img_195.png" loading="lazy"></p><p><img src="'+j+'" alt="img_196.png" loading="lazy"></p><p><img src="'+f+'" alt="img_197.png" loading="lazy"></p><p><img src="'+h+'" alt="img_198.png" loading="lazy"></p><p><img src="'+b+'" alt="img_199.png" loading="lazy"></p><p><img src="'+B+'" alt="img_200.png" loading="lazy"></p><p><img src="'+u+'" alt="img_201.png" loading="lazy"></p><p><img src="'+T+'" alt="img_202.png" loading="lazy"></p><p><img src="'+C+'" alt="img_203.png" loading="lazy"></p><p><img src="'+E+'" alt="img_204.png" loading="lazy"></p><p>kafka默认是异步的，如果要同步的。</p><p><img src="'+q+'" alt="img_205.png" loading="lazy"></p><p>对于分布式系统，副本的作用是不可或缺的。可以通过副本的机制，增大系统的高可用性。就会 不会造成数据的丢失。</p><h2 id="other-brokers" tabindex="-1">other brokers <a class="header-anchor" href="#other-brokers" aria-label="Permalink to &quot;other brokers&quot;">​</a></h2><p><img src="'+D+'" alt="img_206.png" loading="lazy"></p><p>num.replica.fetchers</p><p>默认值：1</p><p>这个参数值，是用来设置，每个broker，能够并行处理多少个副本同步的请求。</p><p>replica.fetch.min.bytes</p><p>默认值：1</p><p>这个参数值，是用来设置，当一个broker，从其他broker，同步数据的时候，</p><p>如果这个broker，能够获取到多少个字节的数据，那么就认为这个同步请求，已经完成。</p><p>replica.fetch.wait.max.ms</p><p>默认值：500</p><p>这个参数值，是用来设置，当一个broker，从其他broker，同步数据的时候，</p><p>一个topic有多个分区，每个分区呢？一个分区上有一个leader，每个leader都有2个follower</p><p><img src="'+S+'" alt="img_207.png" loading="lazy"></p><p>如果，平均每个Broker上有20个leader副本，而一个leader副本，对应2个Follower副本</p><p><img src="'+P+'" alt="img_208.png" loading="lazy"></p><p><img src="'+x+'" alt="img_209.png" loading="lazy"></p><p><img src="'+R+'" alt="img_210.png" loading="lazy"></p><p>线程多的好处，提高这个发送效率的。同步线程多的话一个好处就是可以，提高这个发送效率，</p><p><img src="'+A+'" alt="img_211.png" loading="lazy"></p><p>可以说做到真正的并发复制。</p><p>并行并发的去做复制消息。</p><p><img src="'+H+'" alt="img_212.png" loading="lazy"></p><p><img src="'+I+'" alt="img_213.png" loading="lazy"></p>',62),J=[W];function N(X,w,K,L,M,$){return p(),a("div",null,J)}const Z=s(V,[["render",N]]);export{U as __pageData,Z as default};
