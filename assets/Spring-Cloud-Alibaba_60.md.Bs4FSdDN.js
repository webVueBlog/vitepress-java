import{_ as s,c as a,o as n,a8 as p}from"./chunks/framework.DDO5B0CJ.js";const i="/vitepress-java/assets/img_395.DSQkboir.png",e="/vitepress-java/assets/img_396.DaV8-sP8.png",l="/vitepress-java/assets/img_397.mKqgDMSU.png",r="/vitepress-java/assets/img_398.h6h6POwI.png",t="/vitepress-java/assets/img_399.BiMhBvi7.png",o="/vitepress-java/assets/img_400.b_eqlaey.png",c="/vitepress-java/assets/img_401.D38un0he.png",m="/vitepress-java/assets/img_402.Bdmj2dOJ.png",g="/vitepress-java/assets/img_403.DMpS8wAO.png",_="/vitepress-java/assets/img_404.DCZOBCWi.png",u="/vitepress-java/assets/img_405.hjgLcVsd.png",d="/vitepress-java/assets/img_406.Br83L5ng.png",b="/vitepress-java/assets/img_407.D-Lqo1nw.png",j=JSON.parse('{"title":"60-消息类型-事务消息","description":"","frontmatter":{},"headers":[],"relativePath":"Spring-Cloud-Alibaba/60.md","filePath":"Spring-Cloud-Alibaba/60.md"}'),h={name:"Spring-Cloud-Alibaba/60.md"},v=p('<h1 id="_60-消息类型-事务消息" tabindex="-1">60-消息类型-事务消息 <a class="header-anchor" href="#_60-消息类型-事务消息" aria-label="Permalink to &quot;60-消息类型-事务消息&quot;">​</a></h1><p>RocketMQ 支持事务消息，事务消息是指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。</p><h2 id="_1-事务消息发送" tabindex="-1">1. 事务消息发送 <a class="header-anchor" href="#_1-事务消息发送" aria-label="Permalink to &quot;1. 事务消息发送&quot;">​</a></h2><p>事务消息发送流程如下：</p><p><img src="'+i+'" alt="img_395.png" loading="lazy"></p><p><img src="'+e+'" alt="img_396.png" loading="lazy"></p><p><img src="'+l+'" alt="img_397.png" loading="lazy"></p><p>执行本地事务时，RocketMQ 消息发送会分为两个步骤：</p><ul><li>发送 Half 消息，即只发送消息，但不进行 Commit 操作。</li><li>执行本地事务，根据本地事务执行结果，执行 Commit 或 Rollback 操作。</li><li>根据 Commit 或 Rollback 操作结果，执行发送消息的最终确认。</li><li>如果最终确认失败，会进行消息重试，即重新发送消息。</li><li>如果最终确认成功，则消息发送成功。</li></ul><h2 id="_2-事务消息消费" tabindex="-1">2. 事务消息消费 <a class="header-anchor" href="#_2-事务消息消费" aria-label="Permalink to &quot;2. 事务消息消费&quot;">​</a></h2><p>事务消息消费流程如下：</p><p>消息回查是针对 Consumer 端的，Consumer 端会定时向 Broker 端发送拉取消息的请求，Broker 端会根据 Consumer 端的请求，返回该 Consumer 未消费的消息。</p><p><img src="'+r+'" alt="img_398.png" loading="lazy"></p><h2 id="_3-事务消息实现" tabindex="-1">3. 事务消息实现 <a class="header-anchor" href="#_3-事务消息实现" aria-label="Permalink to &quot;3. 事务消息实现&quot;">​</a></h2><p>RocketMQ 事务消息的实现原理如下：</p><p><img src="'+t+'" alt="img_399.png" loading="lazy"></p><h2 id="_4-事务消息使用" tabindex="-1">4. 事务消息使用 <a class="header-anchor" href="#_4-事务消息使用" aria-label="Permalink to &quot;4. 事务消息使用&quot;">​</a></h2><p>事务消息的使用步骤如下：</p><ul><li>发送 Half 消息。</li><li>执行本地事务。</li><li>执行本地事务的最终确认。</li><li>执行消息的最终确认。</li><li>如果最终确认失败，则进行消息重试。</li><li>如果最终确认成功，则消息发送成功。</li><li>如果最终确认失败，则进行消息回查。</li></ul><p><img src="'+o+'" alt="img_400.png" loading="lazy"></p><p><img src="'+c+'" alt="img_401.png" loading="lazy"></p><p><img src="'+m+`" alt="img_402.png" loading="lazy"></p><h2 id="_5-事务消息使用示例" tabindex="-1">5. 事务消息使用示例 <a class="header-anchor" href="#_5-事务消息使用示例" aria-label="Permalink to &quot;5. 事务消息使用示例&quot;">​</a></h2><p>事务消息的使用示例如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@Autowired</span></span>
<span class="line"><span>private TransactionMQProducer producer;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Override</span></span>
<span class="line"><span>public void sendTransactionMessage(String message) throws Exception {</span></span>
<span class="line"><span>    TransactionSendResult sendResult = producer.sendMessageInTransaction(new Message(&quot;TopicTest&quot;, message.getBytes()), null);</span></span>
<span class="line"><span>    System.out.printf(&quot;%s%n&quot;, sendResult);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void testSendTransactionMessage() throws Exception {</span></span>
<span class="line"><span>    sendTransactionMessage(&quot;Hello RocketMQ&quot;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>@EnableTransactionMQ</span></span>
<span class="line"><span>public class TransactionMQProducerApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication.run(TransactionMQProducerApplication.class, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><img src="`+g+'" alt="img_403.png" loading="lazy"></p><h2 id="_6-事务消息使用注意事项" tabindex="-1">6. 事务消息使用注意事项 <a class="header-anchor" href="#_6-事务消息使用注意事项" aria-label="Permalink to &quot;6. 事务消息使用注意事项&quot;">​</a></h2><p>事务消息的使用注意事项如下：</p><ul><li>事务消息不支持延时消息和批量消息。</li><li>事务消息不支持本地事务的回滚。</li><li>事务消息可能重复消费，需要应用做好幂等处理。</li><li>事务消息可能丢失，需要应用做好消息重发处理。</li></ul><p><img src="'+_+'" alt="img_404.png" loading="lazy"></p><p><img src="'+u+'" alt="img_405.png" loading="lazy"></p><p><img src="'+d+'" alt="img_406.png" loading="lazy"></p><p><img src="'+b+'" alt="img_407.png" loading="lazy"></p>',33),q=[v];function k(f,y,S,T,C,M){return n(),a("div",null,q)}const z=s(h,[["render",k]]);export{j as __pageData,z as default};
