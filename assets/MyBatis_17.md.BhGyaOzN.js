import{_ as a,c as t,o as s,a8 as e}from"./chunks/framework.DDO5B0CJ.js";const M=JSON.parse('{"title":"能说说MyBatis的工作原理吗？","description":"","frontmatter":{},"headers":[],"relativePath":"MyBatis/17.md","filePath":"MyBatis/17.md"}'),i={name:"MyBatis/17.md"},p=e('<h1 id="能说说mybatis的工作原理吗" tabindex="-1">能说说MyBatis的工作原理吗？ <a class="header-anchor" href="#能说说mybatis的工作原理吗" aria-label="Permalink to &quot;能说说MyBatis的工作原理吗？&quot;">​</a></h1><p>首先，我们知道MyBatis是一个优秀的持久层框架，它是用来简化数据库操作的。 传统地，如果没有使用框架，我们可能需要手写大量的JDBC代码，处理很多的资源管理和异常处理。但MyBatis帮我们抽象了这一部分。</p><p>好，让我们来看一下MyBatis的工作原理：</p><p>配置文件：MyBatis需要一个XML配置文件，叫做mybatis-config.xml，用于定义数据源、事务管理以及其他一些设置。</p><p>SQL映射文件：为了告诉MyBatis如何映射SQL查询到我们的对象或Java Beans，我们需要定义另一些XML文件。这些文件里，我们会写SQL语句，并定义输入和输出。</p><p>SqlSessionFactory：当MyBatis初始化时，它会根据上面提到的配置文件创建一个SqlSessionFactory。 这个工厂只会被创建一次，然后被用来生产SqlSession，这些SqlSession是应用中真正做数据库操作的对象。</p><p>SqlSession：这是MyBatis的一个关键组件。每当我们想和数据库进行交互时，我们就从SqlSessionFactory那里拿到一个SqlSession。 这个会话包含了所有执行SQL的方法，比如insert, update, delete, select等。</p><p>映射器：为了使代码更整洁，我们经常使用接口来代表SQL映射。这些接口的方法对应了之前在XML映射文件中定义的SQL语句。 这样，我们就可以像调用普通的Java方法那样执行SQL语句了。</p><p>那么，当你在应用中调用一个映射器方法时，这里发生了什么？</p><p>MyBatis会找到对应的SQL语句。</p><p>使用给定的参数，MyBatis会为这条SQL语句创建一个PreparedStatement。</p><p>执行这个PreparedStatement。</p><p>如果这是一个查询操作，MyBatis会将查询结果映射到Java对象或集合中。</p><p>最后，返回这个结果。</p><p>这就是MyBatis的基本工作原理。使用MyBatis，我们可以更方便地与数据库交互，同时避免大部分重复和模板化的代码。</p>',15),o=[p];function n(r,S,_,c,y,l){return s(),t("div",null,o)}const d=a(i,[["render",n]]);export{M as __pageData,d as default};
