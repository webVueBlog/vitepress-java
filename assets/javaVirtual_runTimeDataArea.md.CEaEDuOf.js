import{_ as a,c as e,o as p,a8 as t}from"./chunks/framework.DDO5B0CJ.js";const o="/vitepress-java/assets/img.CQDL4PJm.png",r="/vitepress-java/assets/img_1.DeOi0KNT.png",s="/vitepress-java/assets/img_2.7SE38H_z.png",h=JSON.parse('{"title":"一、运行时数据区域","description":"","frontmatter":{},"headers":[],"relativePath":"javaVirtual/runTimeDataArea.md","filePath":"javaVirtual/runTimeDataArea.md"}'),i={name:"javaVirtual/runTimeDataArea.md"},l=t('<h1 id="一、运行时数据区域" tabindex="-1">一、运行时数据区域 <a class="header-anchor" href="#一、运行时数据区域" aria-label="Permalink to &quot;一、运行时数据区域&quot;">​</a></h1><p><img src="'+o+'" alt="img.png" loading="lazy"></p><blockquote><p>程序计数器</p></blockquote><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p><blockquote><p>Java 虚拟机栈</p></blockquote><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量 池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈 中入栈和出栈的过程。</p><p><img src="'+r+'" alt="img_1.png" loading="lazy"></p><p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK 1.5+ 默认为 1M：</p><p>java -Xss2M HackTheJava</p><p>该区域可能抛出以下异常：</p><p>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</p><p>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常</p><blockquote><p>本地方法栈</p></blockquote><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法 服务。</p><p>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本 机硬件和操作系统的程序，对待这些方法需要特别处理。</p><p><img src="'+s+'" alt="img_2.png" loading="lazy"></p><blockquote><p>堆</p></blockquote><p>所有对象都在这里分配内存，是垃圾收集的主要区域（&quot;GC 堆&quot;）。</p><p>现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象</p><p>采取不同的垃圾回收算法。可以将堆分成两块：</p><ul><li>新生代（Young Generation）</li><li>老年代（Old Generation）</li></ul><p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p><p>可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参 数设置初始值，第二个参数设置最大值。</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>java -Xms1M -Xmx2M HackTheJava</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>方法区</p></blockquote><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较 难实现。</p><p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它 受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代， 并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。</p><p>方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后， 原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量 池等放入堆中。</p><blockquote><p>运行时常量池</p></blockquote><p>运行时常量池是方法区的一部分。</p><p>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个 区域。</p><p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p><blockquote><p>直接内存</p></blockquote><p>在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后 通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些 场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</p>',36),n=[l];function c(u,m,_,d,v,g){return p(),e("div",null,n)}const k=a(i,[["render",c]]);export{h as __pageData,k as default};
