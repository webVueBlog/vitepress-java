import{_ as a,c as s,o as e,a8 as n}from"./chunks/framework.DDO5B0CJ.js";const i="/vitepress-java/assets/img_10.B1afTuh0.png",l="/vitepress-java/assets/img_11.DQfJgDKy.png",p="/vitepress-java/assets/img_12.uVARrjJs.png",t="/vitepress-java/assets/img_13.CS67wrNr.png",r="/vitepress-java/assets/img_14.fwhlLpu5.png",o="/vitepress-java/assets/img_15.C0yXkyem.png",c="/vitepress-java/assets/img_16.CFVK_LbN.png",m="/vitepress-java/assets/img_17.C6pNo0xW.png",h="/vitepress-java/assets/img_18.BhQFS0YD.png",g="/vitepress-java/assets/img_19.5uC2pGec.png",d="/vitepress-java/assets/img_20.CKglOHxW.png",u="/vitepress-java/assets/img_21.DjJIWjDZ.png",_="/vitepress-java/assets/img_22.DBnkrT8t.png",b="/vitepress-java/assets/img_23.BcZ3u4Qx.png",v="/vitepress-java/assets/img_24.BsLMp9ik.png",O="/vitepress-java/assets/img_25.GaYGLOYv.png",f="/vitepress-java/assets/img_26.IMzxec8O.png",T=JSON.parse('{"title":"七、NIO","description":"","frontmatter":{},"headers":[],"relativePath":"javaIo/nio.md","filePath":"javaIo/nio.md"}'),I={name:"javaIo/nio.md"},C=n('<h1 id="七、nio" tabindex="-1">七、NIO <a class="header-anchor" href="#七、nio" aria-label="Permalink to &quot;七、NIO&quot;">​</a></h1><p>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了 高速的、面向块的 I/O。</p><h2 id="流与块" tabindex="-1">流与块 <a class="header-anchor" href="#流与块" aria-label="Permalink to &quot;流与块&quot;">​</a></h2><p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p><p>面向流的 I/O 一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消 费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤 器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p><p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面 向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p>I/O 包和 NIO 已经很好地集成了，java.io.* 已经以 NIO 为基础重新实现了，所以现 在它可以利用 NIO 的一些特性。例如，java.io.* 包中的一些类包含以块的形式读写 数据的方法，这使得即使在面向流的系统中，处理速度也会更快</p><h2 id="通道与缓冲区" tabindex="-1">通道与缓冲区 <a class="header-anchor" href="#通道与缓冲区" aria-label="Permalink to &quot;通道与缓冲区&quot;">​</a></h2><h3 id="_1-通道" tabindex="-1">1. 通道 <a class="header-anchor" href="#_1-通道" aria-label="Permalink to &quot;1. 通道&quot;">​</a></h3><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p><p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p><p>通道包括以下类型</p><ul><li>FileChannel：从文件中读写数据；</li><li>DatagramChannel：通过 UDP 读写网络中数据；</li><li>SocketChannel：通过 TCP 读写网络中数据；</li><li>ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会 创建一个 SocketChannel。</li></ul><h3 id="_2-缓冲区" tabindex="-1">2. 缓冲区 <a class="header-anchor" href="#_2-缓冲区" aria-label="Permalink to &quot;2. 缓冲区&quot;">​</a></h3><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何 数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过 缓冲区。</p><p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访 问，而且还可以跟踪系统的读/写进程。</p><p>缓冲区包括以下类型：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><h2 id="缓冲区状态变量" tabindex="-1">缓冲区状态变量 <a class="header-anchor" href="#缓冲区状态变量" aria-label="Permalink to &quot;缓冲区状态变量&quot;">​</a></h2><ul><li>capacity：最大容量；</li><li>position：当前已经读写的字节数；</li><li>limit：还可以读写的字节数。</li></ul><p>状态变量的改变过程举例：</p><p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。 capacity 变量不会改变，下面的讨论会忽略它。</p><p><img src="'+i+'" alt="img_10.png" loading="lazy"></p><p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 为 5，limit 保持不 变。</p><p><img src="'+l+'" alt="img_11.png" loading="lazy"></p><p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p><p><img src="'+p+'" alt="img_12.png" loading="lazy"></p><p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p><p><img src="'+t+'" alt="img_13.png" loading="lazy"></p><p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位 置。</p><p><img src="'+r+'" alt="img_14.png" loading="lazy"></p><h2 id="文件-nio-实例" tabindex="-1">文件 NIO 实例 <a class="header-anchor" href="#文件-nio-实例" aria-label="Permalink to &quot;文件 NIO 实例&quot;">​</a></h2><p>以下展示了使用 NIO 快速复制文件的实例：</p><p><img src="'+o+'" alt="img_15.png" loading="lazy"></p><p><img src="'+c+'" alt="img_16.png" loading="lazy"></p><p><img src="'+m+'" alt="img_17.png" loading="lazy"></p><h2 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h2><p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使 用。</p><p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以 处理多个事件。</p><p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时， 就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达 的 Channel 执行。</p><p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程 处理一个事件，对于 IO 密集型的应用具有很好地性能。</p><p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p><p><img src="'+h+`" alt="img_18.png" loading="lazy"></p><h3 id="_1-创建选择器" tabindex="-1">1. 创建选择器 <a class="header-anchor" href="#_1-创建选择器" aria-label="Permalink to &quot;1. 创建选择器&quot;">​</a></h3><p>Selector selector = Selector.open();</p><ol start="2"><li>将通道注册到选择器上</li></ol><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ServerSocketChannel ssChannel = ServerSocketChannel.open();</span></span>
<span class="line"><span>ssChannel.configureBlocking(false);</span></span>
<span class="line"><span>ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某 个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能 去处理其它事件，显然这和选择器的作用背道而驰。</p><p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SelectionKey.OP_CONNECT</span></span>
<span class="line"><span>SelectionKey.OP_ACCEPT</span></span>
<span class="line"><span>SelectionKey.OP_READ</span></span>
<span class="line"><span>SelectionKey.OP_WRITE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它们在 SelectionKey 的定义如下：</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>public static final int OP_READ = 1 &lt;&lt; 0;</span></span>
<span class="line"><span>public static final int OP_WRITE = 1 &lt;&lt; 2;</span></span>
<span class="line"><span>public static final int OP_CONNECT = 1 &lt;&lt; 3;</span></span>
<span class="line"><span>public static final int OP_ACCEPT = 1 &lt;&lt; 4;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-监听事件" tabindex="-1">3. 监听事件 <a class="header-anchor" href="#_3-监听事件" aria-label="Permalink to &quot;3. 监听事件&quot;">​</a></h3><p>int num = selector.select();</p><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p><h3 id="_4-获取到达的事件" tabindex="-1">4. 获取到达的事件 <a class="header-anchor" href="#_4-获取到达的事件" aria-label="Permalink to &quot;4. 获取到达的事件&quot;">​</a></h3><p><img src="`+g+'" alt="img_19.png" loading="lazy"></p><h3 id="_5-事件循环" tabindex="-1">5. 事件循环 <a class="header-anchor" href="#_5-事件循环" aria-label="Permalink to &quot;5. 事件循环&quot;">​</a></h3><p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事 件，因此服务器端处理事件的代码一般会放在一个死循环内。</p><p><img src="'+d+'" alt="img_20.png" loading="lazy"></p><p><img src="'+u+'" alt="img_21.png" loading="lazy"></p><h2 id="套接字-nio-实例" tabindex="-1">套接字 NIO 实例 <a class="header-anchor" href="#套接字-nio-实例" aria-label="Permalink to &quot;套接字 NIO 实例&quot;">​</a></h2><p><img src="'+_+'" alt="img_22.png" loading="lazy"></p><p><img src="'+b+'" alt="img_23.png" loading="lazy"></p><p><img src="'+v+'" alt="img_24.png" loading="lazy"></p><p><img src="'+O+'" alt="img_25.png" loading="lazy"></p><p><img src="'+f+`" alt="img_26.png" loading="lazy"></p><h2 id="内存映射文件" tabindex="-1">内存映射文件 <a class="header-anchor" href="#内存映射文件" aria-label="Permalink to &quot;内存映射文件&quot;">​</a></h2><p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通 道的 I/O 快得多。</p><p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可 能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p><p>下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_WRITE, 0,</span></span>
<span class="line"><span>1024);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>对比</p></blockquote><p>NIO 与普通 I/O 的区别主要有以下两点：</p><ul><li>NIO 是非阻塞的；</li><li>NIO 面向块，I/O 面向流。</li></ul>`,77),y=[C];function k(P,q,N,S,j,B){return e(),s("div",null,y)}const z=a(I,[["render",k]]);export{T as __pageData,z as default};
