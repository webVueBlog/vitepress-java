import{_ as p,c as e,o as a,a8 as n}from"./chunks/framework.DDO5B0CJ.js";const l=JSON.parse('{"title":"介绍下SpringAop的底层实现","description":"","frontmatter":{},"headers":[],"relativePath":"Spring/20.md","filePath":"Spring/20.md"}'),r={name:"Spring/20.md"},t=n('<h1 id="介绍下springaop的底层实现" tabindex="-1">介绍下SpringAop的底层实现 <a class="header-anchor" href="#介绍下springaop的底层实现" aria-label="Permalink to &quot;介绍下SpringAop的底层实现&quot;">​</a></h1><p>Spring AOP是Spring框架的一个重要组成部分，用于实现面向切面编程。 它通过在方法调用前、调用后或异常抛出时插入通知，允许开发者在核心业务逻辑之外执行横切关注点的代码。</p><p>底层实现主要分两部分：创建AOP动态代理和调用代理</p><p>在启动Spring会创建AOP动态代理：</p><p>首先通过AspectJ解析切点表达式： 在创建代理对象时，Spring AOP使用AspectJ来解析切点表达式。它会根据定义的条件匹配目标Bean的方法。 如果Bean不符合切点的条件，将跳过，否则将会通动态代理包装Bean对象： 具体会根据目标对象是否实现接口来选择使用JDK动态代理或CGLIB代理。这使得AOP可以适用于各种类型的目标对象。</p><p>在调用阶段：</p><p>Spring AOP使用责任链模式来管理通知的执行顺序。 通知拦截链包括前置通知、后置通知、异常通知、最终通知和环绕通知，它们按照配置的顺序形成链式结构。</p><p>通知的有序执行： 责任链确保通知按照预期顺序执行。前置通知在目标方法执行前执行，后置通知在目标方法成功执行后执行， 异常通知在方法抛出异常时执行，最终通知无论如何都会执行，而环绕通知包裹目标方法，允许在方法执行前后添加额外的行为。</p><p>综上所述，Spring AOP在创建启动阶段使用AspectJ解析切点表达式如果匹配使用动态代理， 而在调用阶段使用责任链模式确保通知的有序执行。这些机制共同构成了Spring AOP的底层实现。</p>',9),i=[t];function o(s,_,c,S,A,d){return a(),e("div",null,i)}const P=p(r,[["render",o]]);export{l as __pageData,P as default};
