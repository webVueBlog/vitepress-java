import{_ as a,c as t,o as n,l as e,a as s}from"./chunks/framework.CbRyzB36.js";const x=JSON.parse('{"title":"第 7 章 多形性","description":"","frontmatter":{},"headers":[],"relativePath":"ThinkingInJava/7.md","filePath":"ThinkingInJava/7.md"}'),o={name:"ThinkingInJava/7.md"},i=e("h1",{id:"第-7-章-多形性",tabindex:"-1"},[s("第 7 章 多形性 "),e("a",{class:"header-anchor",href:"#第-7-章-多形性","aria-label":'Permalink to "第 7 章 多形性"'},"​")],-1),c=e("p",null,"“多形性”意味着“不同的形式”。在面向对象的程序设计中，我们有相同的外观（基础类的通用接口）以 及使用那个外观的不同形式：动态绑定或组织的、不同版本的方法。",-1),r=e("p",null,"大家已知道假如不利用数据抽象以及继承技术，就不可能理解、甚至去创建多形性的一 个例子。多形性是一种不可独立应用的特性（就象一个switch语句），只可与其他元素协同使用。我们应将 其作为类总体关系的一部分来看待。人们经常混淆 Java 其他的、非面向对象的特性，比如方法过载等，这些 特性有时也具有面向对象的某些特征。但不要被愚弄：如果以后没有绑定，就不成其为多形性。",-1),_=e("p",null,"为使用多形性乃至面向对象的技术，特别是在自己的程序中，必须将自己的编程视野扩展到不仅包括单独一 个类的成员和消息，也要包括类与类之间的一致性以及它们的关系。尽管这要求学习时付出更多的精力，但 却是非常值得的，因为只有这样才可真正有效地加快自己的编程速度、更好地组织代码、更容易做出包容面 广的程序以及更易对自己的代码进行维护与扩展",-1),d=[i,c,r,_];function l(h,p,m,f,u,k){return n(),t("div",null,d)}const J=a(o,[["render",l]]);export{x as __pageData,J as default};
