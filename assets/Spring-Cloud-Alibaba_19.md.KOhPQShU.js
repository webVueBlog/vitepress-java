import{_ as a,c as s,o as t,a8 as i}from"./chunks/framework.DDO5B0CJ.js";const e="/vitepress-java/assets/img_124.8T_kzYLt.png",p="/vitepress-java/assets/img_125.DPa_Ugwb.png",r="/vitepress-java/assets/img_126.Bi2gJpVT.png",o="/vitepress-java/assets/img_127.CEypjXHy.png",n="/vitepress-java/assets/img_128.BCid_ofb.png",l="/vitepress-java/assets/img_129.Dv9G15e_.png",_="/vitepress-java/assets/img_130.BncBqlVM.png",g="/vitepress-java/assets/img_131.AP-F9kfP.png",m="/vitepress-java/assets/img_132.CBzcG_zX.png",c="/vitepress-java/assets/img_133.mHjByMKd.png",k=JSON.parse('{"title":"19-服务容错思路和组件","description":"","frontmatter":{},"headers":[],"relativePath":"Spring-Cloud-Alibaba/19.md","filePath":"Spring-Cloud-Alibaba/19.md"}'),d={name:"Spring-Cloud-Alibaba/19.md"},h=i('<h1 id="_19-服务容错思路和组件" tabindex="-1">19-服务容错思路和组件 <a class="header-anchor" href="#_19-服务容错思路和组件" aria-label="Permalink to &quot;19-服务容错思路和组件&quot;">​</a></h1><h2 id="常见容错方案" tabindex="-1">常见容错方案 <a class="header-anchor" href="#常见容错方案" aria-label="Permalink to &quot;常见容错方案&quot;">​</a></h2><p>要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措施，下面介绍常见的服务容错思路和组件。</p><h3 id="常见的容错思路" tabindex="-1">常见的容错思路 <a class="header-anchor" href="#常见的容错思路" aria-label="Permalink to &quot;常见的容错思路&quot;">​</a></h3><p>常见的容错思路有隔离，超时，限流，降级，熔断，重试等。</p><h3 id="隔离" tabindex="-1">隔离 <a class="header-anchor" href="#隔离" aria-label="Permalink to &quot;隔离&quot;">​</a></h3><p><img src="'+e+'" alt="img_124.png" loading="lazy"></p><p><img src="'+p+'" alt="img_125.png" loading="lazy"></p><p><img src="'+r+'" alt="img_126.png" loading="lazy"></p><p>在上游服务调用下游服务的时候，设置一个最大并发数，当并发数超过最大并发数时，就拒绝服务，从而避免服务雪崩。</p><h3 id="限流" tabindex="-1">限流 <a class="header-anchor" href="#限流" aria-label="Permalink to &quot;限流&quot;">​</a></h3><p>限流就是限制服务的访问量，比如限制1分钟内只能访问100次。</p><p><img src="'+o+'" alt="img_127.png" loading="lazy"></p><p><img src="'+n+'" alt="img_128.png" loading="lazy"></p><h3 id="熔断" tabindex="-1">熔断 <a class="header-anchor" href="#熔断" aria-label="Permalink to &quot;熔断&quot;">​</a></h3><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。</p><p><img src="'+l+'" alt="img_129.png" loading="lazy"></p><p><img src="'+_+'" alt="img_130.png" loading="lazy"></p><h3 id="降级" tabindex="-1">降级 <a class="header-anchor" href="#降级" aria-label="Permalink to &quot;降级&quot;">​</a></h3><p>降级就是当某个服务熔断或者关闭之后，服务将不再被调用， 此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值，这样做，虽然服务水平下降，但好歹可用，比直接返回500错误要强。</p><p><img src="'+g+'" alt="img_131.png" loading="lazy"></p><p><img src="'+m+'" alt="img_132.png" loading="lazy"></p><p><img src="'+c+'" alt="img_133.png" loading="lazy"></p>',23),b=[h];function v(u,f,q,P,y,z){return t(),s("div",null,b)}const x=a(d,[["render",v]]);export{k as __pageData,x as default};
