import{_ as a,c as e,o as t,a8 as n}from"./chunks/framework.DDO5B0CJ.js";const s="/vitepress-java/assets/img_1.DEodbhan.png",p="/vitepress-java/assets/img_2.BOTe5Xgc.png",r="/vitepress-java/assets/img_3.IIJ-FeKF.png",I=JSON.parse('{"title":"三、字节操作","description":"","frontmatter":{},"headers":[],"relativePath":"javaIo/byteOperation.md","filePath":"javaIo/byteOperation.md"}'),i={name:"javaIo/byteOperation.md"},l=n('<h1 id="三、字节操作" tabindex="-1">三、字节操作 <a class="header-anchor" href="#三、字节操作" aria-label="Permalink to &quot;三、字节操作&quot;">​</a></h1><h2 id="实现文件复制" tabindex="-1">实现文件复制 <a class="header-anchor" href="#实现文件复制" aria-label="Permalink to &quot;实现文件复制&quot;">​</a></h2><p><img src="'+s+'" alt="img_1.png" loading="lazy"></p><p><img src="'+p+'" alt="img_2.png" loading="lazy"></p><h2 id="装饰者模式" tabindex="-1">装饰者模式 <a class="header-anchor" href="#装饰者模式" aria-label="Permalink to &quot;装饰者模式&quot;">​</a></h2><p>Java I/O 使用了装饰者模式来实现。以 InputStream 为例</p><p>InputStream 是抽象组件；</p><p>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操 作；</p><p>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功 能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</p><p><img src="'+r+`" alt="img_3.png" loading="lazy"></p><p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一 层 BufferedInputStream 对象即可。</p><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>FileInputStream fileInputStream = new FileInputStream(filePath);</span></span>
<span class="line"><span>BufferedInputStream bufferedInputStream = new</span></span>
<span class="line"><span>BufferedInputStream(fileInputStream);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等 基本类型</p>`,13),o=[l];function m(c,u,d,_,h,g){return t(),e("div",null,o)}const f=a(i,[["render",m]]);export{I as __pageData,f as default};
