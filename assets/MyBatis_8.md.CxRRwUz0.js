import{_ as a,c as t,o as e,a8 as i}from"./chunks/framework.DDO5B0CJ.js";const u=JSON.parse('{"title":"MyBatis如何处理延迟加载？","description":"","frontmatter":{},"headers":[],"relativePath":"MyBatis/8.md","filePath":"MyBatis/8.md"}'),r={name:"MyBatis/8.md"},o=i('<h1 id="mybatis如何处理延迟加载" tabindex="-1">MyBatis如何处理延迟加载？ <a class="header-anchor" href="#mybatis如何处理延迟加载" aria-label="Permalink to &quot;MyBatis如何处理延迟加载？&quot;">​</a></h1><p>所谓的延迟加载，其实就是一种优化方法， 目标是为了在查数据库的时候，尽量不读取多余的数据，从而提高我们应用的表现和节约资源。 在MyBatis里，这个延迟加载的技巧主要是用在处理对象关系映射的时候，也就是ORM。</p><p>来个例子帮你理解：假设有两张表，一张是订单表，另一张是商品表。每个订单下面可能有好几个商品。 用延迟加载的话，当我们查一个订单的时候，MyBatis不会马上查出这个订单的所有商品，而是等到我们真的要用商品的数据时才去查。 这样做就避免了在查订单的时候额外加载了一堆没用的商品。</p><h2 id="用延迟加载有几个好处" tabindex="-1">用延迟加载有几个好处： <a class="header-anchor" href="#用延迟加载有几个好处" aria-label="Permalink to &quot;用延迟加载有几个好处：&quot;">​</a></h2><h2 id="性能更好" tabindex="-1">性能更好： <a class="header-anchor" href="#性能更好" aria-label="Permalink to &quot;性能更好：&quot;">​</a></h2><p>特别是在对象关系复杂或者数据多的情况下，延迟加载可以减少一次性加载大量数据，让查询更快，应答更快。</p><h2 id="省资源" tabindex="-1">省资源： <a class="header-anchor" href="#省资源" aria-label="Permalink to &quot;省资源：&quot;">​</a></h2><p>不一开始就加载所有关联数据，可以按需加载，节约了内存和网络资源。</p><h2 id="避免不必要的查" tabindex="-1">避免不必要的查： <a class="header-anchor" href="#避免不必要的查" aria-label="Permalink to &quot;避免不必要的查：&quot;">​</a></h2><p>如果有些关联数据在当前情境下用不上，用延迟加载就能避免没必要的数据库查，不累积数据库的负担。</p><p>但要注意，虽然延迟加载能提升性能，可别用得过了，免得碰上懒加载的N+1问题，就是要查很多次才能拿到关联数据，结果性能就拖垮了。 所以用延迟加载的时候，得根据实际情况合理配置和使用。</p><p>总之，MyBatis的延迟加载能帮助优化数据库查询，不读取不必要的数据，提升应用的响应速度，资源利用也更高。</p>',12),s=[o];function n(h,c,l,d,_,p){return e(),t("div",null,s)}const f=a(r,[["render",n]]);export{u as __pageData,f as default};
