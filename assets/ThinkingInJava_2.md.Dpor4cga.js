import{_ as a,c as e,o as t,a8 as i}from"./chunks/framework.CbRyzB36.js";const r="/vitepress-java/assets/img_2.KTXLQgZ6.png",l="/vitepress-java/assets/img_3.1Diqup0d.png",b=JSON.parse('{"title":"第 2 章 一切都是对象","description":"","frontmatter":{},"headers":[],"relativePath":"ThinkingInJava/2.md","filePath":"ThinkingInJava/2.md"}'),n={name:"ThinkingInJava/2.md"},o=i('<h1 id="第-2-章-一切都是对象" tabindex="-1">第 2 章 一切都是对象 <a class="header-anchor" href="#第-2-章-一切都是对象" aria-label="Permalink to &quot;第 2 章 一切都是对象&quot;">​</a></h1><p>注意，尽管将一切都“看作”对象，但操纵的标识符实际是指向一个对象的“句柄” （H an d le）。</p><h2 id="_2-2-所有对象都必须创建" tabindex="-1">2.2 所有对象都必须创建 <a class="header-anchor" href="#_2-2-所有对象都必须创建" aria-label="Permalink to &quot;2.2 所有对象都必须创建&quot;">​</a></h2><h3 id="_2-2-1-保存到什么地方" tabindex="-1">2.2.1 保存到什么地方 <a class="header-anchor" href="#_2-2-1-保存到什么地方" aria-label="Permalink to &quot;2.2.1 保存到什么地方&quot;">​</a></h3><p>程序运行时，我们最好对数据保存到什么地方做到心中有数。特别要注意的是内存的分配。有六个地方都可 以保存数据：</p><p>(1) 寄存器。这是最快的保存区域，因为它位于和其他所有保存方式不同的地方：处理器内部。然而，寄存 器的数量十分有限，所以寄存器是根据需要由编译器分配。我们对此没有直接的控制权，也不可能在自己的 程序里找到寄存器存在的任何踪迹。</p><p>(2) 堆栈。驻留于常规 RAM （随机访问存储器）区域，但可通过它的“堆栈指针”获得处理的直接支持。堆 栈指针若向下移，会创建新的内存；若向上移，则会释放那些内存。这是一种特别快、特别有效的数据保存 方式，仅次于寄存器。创建程序时，Java 编译器必须准确地知道堆栈内保存的所有数据的“长度”以及“存 在时间”。这是由于它必须生成相应的代码，以便向上和向下移动指针。这一限制无疑影响了程序的灵活 性，所以尽管有些 Java 数据要保存在堆栈里——特别是对象句柄，但Java 对象并不放到其中。</p><p>(3) 堆。一种常规用途的内存池（也在 RAM 区域），其中保存了Java 对象。和堆栈不同，“内存堆”或 “堆”（Heap ）最吸引人的地方在于编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要 在堆里停留多长的时间。因此，用堆保存数据时会得到更大的灵活性。要求创建一个对象时，只需用new 命 令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存。当然，为达到这种灵活性，必然 会付出一定的代价：在堆里分配存储空间时会花掉更长的时间！</p><p>(4) 静态存储。这儿的“静态”（Static）是指“位于固定位置”（尽管也在 RAM 里）。程序运行期间，静 态存储的数据将随时等候调用。可用static关键字指出一个对象的特定元素是静态的。但 Java 对象本身永 远都不会置入静态存储空间。</p><p>(5) 常数存储。常数值通常直接置于程序代码内部。这样做是安全的，因为它们永远都不会改变。有的常数 需要严格地保护，所以可考虑将它们置入只读存储器（ROM ）。</p><p>(6) 非RAM 存储。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。 其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给 另一台机器。而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对 于这些类型的数据存储，一个特别有用的技巧就是它们能存在于其他媒体中。一旦需要，甚至能将它们恢复 成普通的、基于RAM 的对象。Java 1.1提供了对Lightweight persistence 的支持。未来的版本甚至可能提 供更完整的方案。</p><h3 id="_2-2-2-特殊情况-主要类型" tabindex="-1">2.2.2 特殊情况：主要类型 <a class="header-anchor" href="#_2-2-2-特殊情况-主要类型" aria-label="Permalink to &quot;2.2.2 特殊情况：主要类型&quot;">​</a></h3><p>因为new 将对象置于“堆”里</p><p><img src="'+r+'" alt="img_2.png" loading="lazy"></p><ol><li>高精度数字</li></ol><p>Java 1.1增加了两个类，用于进行高精度的计算：BigInteger和 BigDecimal。尽管它们大致可以划分为 “封装器”类型，但两者都没有对应的“主类型”。</p><p>这两个类都有自己特殊的“方法”，对应于我们针对主类型执行的操作。也就是说，能对int或 float做的 事情，对BigInteger和BigDecimal一样可以做。只是必须使用方法调用，不能使用运算符。此外，由于牵 涉更多，所以运算速度会慢一些。我们牺牲了速度，但换来了精度。</p><p>BigInteger支持任意精度的整数。也就是说，我们可精确表示任意大小的整数值，同时在运算过程中不会丢 失任何信息。</p><p>BigDecimal支持任意精度的定点数字。例如，可用它进行精确的币值计算。</p><h3 id="_2-2-3-java的数组" tabindex="-1">2.2.3 Java的数组 <a class="header-anchor" href="#_2-2-3-java的数组" aria-label="Permalink to &quot;2.2.3 Java的数组&quot;">​</a></h3><p>几乎所有程序设计语言都支持数组。</p><p>Java 可以保证被初始化，而且不可在它的范围之外访问。由于系统自动进行范围检查，所以必然要付出一些 代价：针对每个数组，以及在运行期间对索引的校验，都会造成少量的内存开销。但由此换回的是更高的安 全性，以及更高的工作效率。为此付出少许代价是值得的。</p><p>创建对象数组时，实际创建的是一个句柄数组。而且每个句柄都会自动初始化成一个特殊值，并带有自己的 关键字：null（空）。一旦 Java 看到null，就知道该句柄并未指向一个对象。正式使用前，必须为每个句 柄都分配一个对象。若试图使用依然为null的一个句柄，就会在运行期报告问题。因此，典型的数组错误在 Java 里就得到了避免。</p><p>也可以创建主类型数组。同样地，编译器能够担保对它的初始化，因为会将那个数组的内存划分成零。</p><h3 id="_2-3-绝对不要清除对象" tabindex="-1">2.3 绝对不要清除对象 <a class="header-anchor" href="#_2-3-绝对不要清除对象" aria-label="Permalink to &quot;2.3 绝对不要清除对象&quot;">​</a></h3><p>在大多数程序设计语言中，变量的“存在时间”（Lifetime）一直是程序员需要着重考虑的问题。变量应持 续多长的时间？如果想清除它，那么何时进行？在变量存在时间上纠缠不清会造成大量的程序错误。</p><h3 id="_2-3-1-作用域" tabindex="-1">2.3.1 作用域 <a class="header-anchor" href="#_2-3-1-作用域" aria-label="Permalink to &quot;2.3.1 作用域&quot;">​</a></h3><p>大多数程序设计语言都提供了“作用域”（Scope）的概念。对于在作用域里定义的名字，作用域同时决定了 它的“可见性”以及“存在时间”。</p><p>在C ，C++ 和 Java 里，作用域是由花括号的位置决定的。</p><h3 id="_2-3-2-对象的作用域" tabindex="-1">2.3.2 对象的作用域 <a class="header-anchor" href="#_2-3-2-对象的作用域" aria-label="Permalink to &quot;2.3.2 对象的作用域&quot;">​</a></h3><p>Java 有一个特别 的“垃圾收集器”，它会查找用new 创建的所有对象，并辨别其中哪些不再被引用。随后，它会自动释放由 那些闲置对象占据的内存，以便能由新对象使用。这意味着我们根本不必操心内存的回收问题。只需简单地 创建对象，一旦不再需要它们，它们就会自动离去。这样做可防止在 C++ 里很常见的一个编程问题：由于程 序员忘记释放内存造成的“内存溢出”。</p><h2 id="_2-4-新建数据类型-类" tabindex="-1">2.4 新建数据类型：类 <a class="header-anchor" href="#_2-4-新建数据类型-类" aria-label="Permalink to &quot;2.4 新建数据类型：类&quot;">​</a></h2><p>如果说一切东西都是对象，那么用什么决定一个“类”（Class）的外观与行为呢？换句话说，是什么建立起 了一个对象的“类型”（Type）呢？大家可能猜想有一个名为“type”的关键字。但从历史看来，大多数面 向对象的语言都用关键字“class”表达这样一个意思：“我准备告诉你对象一种新类型的外观”。</p><h3 id="_2-4-1-字段和方法" tabindex="-1">2.4.1 字段和方法 <a class="header-anchor" href="#_2-4-1-字段和方法" aria-label="Permalink to &quot;2.4.1 字段和方法&quot;">​</a></h3><p><img src="'+l+'" alt="img_3.png" loading="lazy"></p><h2 id="_2-5-方法、自变量和返回值" tabindex="-1">2.5 方法、自变量和返回值 <a class="header-anchor" href="#_2-5-方法、自变量和返回值" aria-label="Permalink to &quot;2.5 方法、自变量和返回值&quot;">​</a></h2><div class="language-angular2html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">angular2html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>返回 型  ( /* 量列 */ ) {/* 主 */}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-5-1-自变量列表" tabindex="-1">2.5.1 自变量列表 <a class="header-anchor" href="#_2-5-1-自变量列表" aria-label="Permalink to &quot;2.5.1 自变量列表&quot;">​</a></h3><p>自变量列表里指定要传递的对象类型，以及每个 对象的名字。</p><h2 id="_2-6-构建-java-程序" tabindex="-1">2.6 构建 Java 程序 <a class="header-anchor" href="#_2-6-构建-java-程序" aria-label="Permalink to &quot;2.6 构建 Java 程序&quot;">​</a></h2><h3 id="_2-6-1-名字的可见性" tabindex="-1">2.6.1 名字的可见性 <a class="header-anchor" href="#_2-6-1-名字的可见性" aria-label="Permalink to &quot;2.6.1 名字的可见性&quot;">​</a></h3><h3 id="_2-6-2-使用其他组件" tabindex="-1">2.6.2 使用其他组件 <a class="header-anchor" href="#_2-6-2-使用其他组件" aria-label="Permalink to &quot;2.6.2 使用其他组件&quot;">​</a></h3><p>import的作用是指示编译器导入一个“包”——或者说一个“类库”（在 其他语言里，可将“库”想象成一系列函数、数据以及类的集合。但请记住，Java 的所有代码都必须写入一 个类中）。</p><h3 id="_2-6-3-static关键字" tabindex="-1">2.6.3 static关键字 <a class="header-anchor" href="#_2-6-3-static关键字" aria-label="Permalink to &quot;2.6.3 static关键字&quot;">​</a></h3><h2 id="_2-7-我们的第一个-java-程序" tabindex="-1">2.7 我们的第一个 Java 程序 <a class="header-anchor" href="#_2-7-我们的第一个-java-程序" aria-label="Permalink to &quot;2.7 我们的第一个 Java 程序&quot;">​</a></h2><h3 id="_2-8-4-see-引用其他类" tabindex="-1">2.8.4 @see：引用其他类 <a class="header-anchor" href="#_2-8-4-see-引用其他类" aria-label="Permalink to &quot;2.8.4 @see：引用其他类&quot;">​</a></h3><ol><li>@version</li></ol><p>格式如下：</p><p>@version 版本信息</p><p>其中，“版本信息”代表任何适合作为版本说明的资料。若在 javadoc命令行使用了“-version”标记，就 会从生成的 HTML 文档里提取出版本信息。</p><ol start="2"><li>@author</li></ol><p>格式如下：</p><p>@author 作者信息</p><p>其中，“作者信息”包括您的姓名、电子函件地址或者其他任何适宜的资料。若在javadoc命令行使用了“- author”标记，就会专门从生成的HTML 文档里提取出作者信息。</p><p>可为一系列作者使用多个这样的标记，但它们必须连续放置。全部作者信息会一起存入最终 HTML 代码的单独 一个段落里。</p>',55),s=[o];function h(p,d,c,_,u,m){return t(),e("div",null,s)}const q=a(n,[["render",h]]);export{b as __pageData,q as default};
